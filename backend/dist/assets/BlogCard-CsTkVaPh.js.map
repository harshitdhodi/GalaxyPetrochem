{"version":3,"file":"BlogCard-CsTkVaPh.js","sources":["../../src/websiteBackend/blogCard/BlogCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, message } from 'antd';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst BlogCardForm = () => {\r\n  const [form] = Form.useForm();\r\n  const [blogCard, setBlogCard] = useState('');\r\n  const [displayContent, setDisplayContent] = useState(''); // State for displayed content\r\n  const [blogCardId, setBlogCardId] = useState(null);\r\n\r\n  const fetchBlogCard = async () => {\r\n    try {\r\n      const response = await axios.get('/api/blogCard/getCard');\r\n      const blogCardData = response.data[0];\r\n\r\n      setBlogCardId(blogCardData._id);\r\n      setBlogCard(blogCardData.blogCard);\r\n\r\n      // Convert white text to black for display\r\n      const parser = new DOMParser();\r\n      const doc = parser.parseFromString(blogCardData.blogCard, 'text/html');\r\n      const elements = doc.getElementsByTagName('*');\r\n      for (let element of elements) {\r\n        if (element.style.color === 'white' || element.style.color === '#ffffff') {\r\n          element.style.color = 'black';\r\n        }\r\n      }\r\n      setDisplayContent(doc.body.innerHTML);\r\n      form.setFieldsValue({ blogCard: blogCardData.blogCard });\r\n    } catch (error) {\r\n      console.error('Failed to fetch blog card:', error);\r\n      message.error('Failed to fetch blog card.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBlogCard();\r\n  }, [form]);\r\n\r\n  const handleEditorChange = (newContent) => {\r\n    setBlogCard(newContent);\r\n\r\n    // Convert white text to black for display\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(newContent, 'text/html');\r\n    const elements = doc.getElementsByTagName('*');\r\n    for (let element of elements) {\r\n      if (element.style.color === 'white' || element.style.color === '#ffffff') {\r\n        element.style.color = 'black';\r\n      }\r\n    }\r\n    setDisplayContent(doc.body.innerHTML);\r\n  };\r\n\r\n  const onFinish = async () => {\r\n    try {\r\n      if (blogCardId) {\r\n        await axios.put(`/api/blogCard/editCard/${blogCardId}`, { blogCard });\r\n        message.success('Blog card updated successfully!');\r\n      } else {\r\n        await axios.post('/api/blogCard/addCard', { blogCard });\r\n        message.success('Blog card added successfully!');\r\n      }\r\n      form.resetFields();\r\n      setBlogCard('');\r\n      setDisplayContent('');\r\n      fetchBlogCard();\r\n    } catch (error) {\r\n      console.error('Failed to save blog card:', error);\r\n      message.error('Failed to save blog card.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" onFinish={onFinish} name=\"blog_card_form\">\r\n      <Form.Item\r\n        name=\"blogCard\"\r\n        label=\"Blog Card Content\"\r\n        rules={[{ required: true, message: 'Please input the blog card content!' }]}\r\n      >\r\n        <ReactQuill\r\n          value={displayContent || blogCard}\r\n          onChange={handleEditorChange}\r\n          modules={{\r\n            toolbar: [\r\n              [{ header: '1' }, { header: '2' }, { font: [] }],\r\n              [{ list: 'ordered' }, { list: 'bullet' }],\r\n              ['bold', 'italic', 'underline', 'blockquote'],\r\n              [{ align: [] }],\r\n              ['link', 'image', 'video'],\r\n              ['clean']\r\n            ]\r\n          }}\r\n          formats={[\r\n            'header', 'font', 'list', 'bold', 'italic', 'underline',\r\n            'blockquote', 'align', 'link', 'image', 'video'\r\n          ]}\r\n        />\r\n      </Form.Item>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          {blogCardId ? 'Update Blog Card' : 'Add Blog Card'}\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default BlogCardForm;\r\n"],"names":["BlogCardForm","form","Form","useForm","blogCard","setBlogCard","useState","displayContent","setDisplayContent","blogCardId","setBlogCardId","fetchBlogCard","async","blogCardData","axios","get","data","_id","doc","DOMParser","parseFromString","elements","getElementsByTagName","element","style","color","body","innerHTML","setFieldsValue","error","message","useEffect","layout","onFinish","put","success","post","resetFields","name","children","jsx","Item","label","rules","required","ReactQuill","value","onChange","newContent","modules","toolbar","header","font","list","align","formats","Button","type","htmlType"],"mappings":"gXAMA,MAAMA,EAAe,KACnB,MAAOC,GAAQC,EAAKC,WACbC,EAAUC,GAAeC,EAAAA,SAAS,KAClCC,EAAgBC,GAAqBF,EAAAA,SAAS,KAC9CG,EAAYC,GAAiBJ,EAAAA,SAAS,MAEvCK,EAAgBC,UAChB,IACF,MACMC,SADiBC,EAAMC,IAAI,0BACHC,KAAK,GAEnCN,EAAcG,EAAaI,KAC3BZ,EAAYQ,EAAaT,UAGnB,MACAc,GADS,IAAIC,WACAC,gBAAgBP,EAAaT,SAAU,aACpDiB,EAAWH,EAAII,qBAAqB,KAC1C,IAAA,IAASC,KAAWF,EACU,UAAxBE,EAAQC,MAAMC,OAA6C,YAAxBF,EAAQC,MAAMC,QACnDF,EAAQC,MAAMC,MAAQ,SAGRjB,EAAAU,EAAIQ,KAAKC,WAC3B1B,EAAK2B,eAAe,CAAExB,SAAUS,EAAaT,iBACtCyB,GAEPC,EAAQD,MAAM,6BAA4B,GAI9CE,EAAAA,WAAU,KACMpB,GAAA,GACb,CAACV,IAoCJ,cACGC,EAAK,CAAAD,OAAY+B,OAAO,WAAWC,SApBrBrB,UACX,IACEH,SACIK,EAAMoB,IAAI,0BAA0BzB,IAAc,CAAEL,aAC1D0B,EAAQK,QAAQ,2CAEVrB,EAAMsB,KAAK,wBAAyB,CAAEhC,aAC5C0B,EAAQK,QAAQ,kCAElBlC,EAAKoC,cACLhC,EAAY,IACZG,EAAkB,IACJG,UACPkB,GAEPC,EAAQD,MAAM,4BAA2B,GAKaS,KAAK,iBAC3DC,SAAA,CAAAC,EAAAA,IAACtC,EAAKuC,KAAL,CACCH,KAAK,WACLI,MAAM,oBACNC,MAAO,CAAC,CAAEC,UAAU,EAAMd,QAAS,wCAEnCS,SAAAC,EAAAA,IAACK,EAAA,CACCC,MAAOvC,GAAkBH,EACzB2C,SA3CoBC,IAC1B3C,EAAY2C,GAGN,MACA9B,GADS,IAAIC,WACAC,gBAAgB4B,EAAY,aACzC3B,EAAWH,EAAII,qBAAqB,KAC1C,IAAA,IAASC,KAAWF,EACU,UAAxBE,EAAQC,MAAMC,OAA6C,YAAxBF,EAAQC,MAAMC,QACnDF,EAAQC,MAAMC,MAAQ,SAGRjB,EAAAU,EAAIQ,KAAKC,UAAS,EAgC9BsB,QAAS,CACPC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,KAAO,CAAEC,KAAM,KAC3C,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,OAAQ,SAAU,YAAa,cAChC,CAAC,CAAEC,MAAO,KACV,CAAC,OAAQ,QAAS,SAClB,CAAC,WAGLC,QAAS,CACP,SAAU,OAAQ,OAAQ,OAAQ,SAAU,YAC5C,aAAc,QAAS,OAAQ,QAAS,aAK7Cf,EAAAA,IAAAtC,EAAKuC,KAAL,CACCF,SAACC,EAAAA,IAAAgB,EAAA,CAAOC,KAAK,UAAUC,SAAS,SAC7BnB,SAAa9B,EAAA,mBAAqB,sBAGzC"}