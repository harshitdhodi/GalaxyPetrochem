{"version":3,"file":"StaticMetaForm-BrVTelar.js","sources":["../../src/websiteBackend/staticMetaKeyword/StaticMetaForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Form, Input, Select, Button, message, Breadcrumb } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst StaticMetaForm = () => {\r\n  const [form] = Form.useForm();\r\n  const [menuList, setMenuList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch menu list\r\n  useEffect(() => {\r\n    const fetchMenus = async () => {\r\n      try {\r\n        const response = await axios.get(\"/api/menulist/get-menu\");\r\n        if (response.data && Array.isArray(response.data.data)) {\r\n          setMenuList(response.data.data);\r\n        } else {\r\n          console.error(\"Unexpected API response:\", response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching menu list:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchMenus();\r\n  }, []);\r\n\r\n  // Fetch existing meta data for editing\r\n  useEffect(() => {\r\n    if (id) {\r\n      axios\r\n        .get(`/api/meta/get-meta/${id}`)\r\n        .then((response) => {\r\n          if (response.data && response.data.success) {\r\n            const metaData = response.data.data;\r\n            form.setFieldsValue({\r\n              pageName: metaData.pageName,\r\n              pageSlug: metaData.pageSlug, // Set slug from existing data\r\n              metaTitle: metaData.metaTitle,\r\n              metaDescription: metaData.metaDescription,\r\n              metaKeyword: metaData.metaKeyword,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => console.error(\"Error fetching meta data:\", error));\r\n    }\r\n  }, [id, form]);\r\n\r\n  // Function to generate slug from page name\r\n  const generateSlug = (pageName) => {\r\n    return pageName\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with dashes\r\n      .replace(/[^a-z0-9-]/g, \"\"); // Remove special characters\r\n  };\r\n\r\n  // Handle page selection and auto-fill slug\r\n  const handlePageChange = (value) => {\r\n    const slug = generateSlug(value);\r\n    form.setFieldsValue({ pageSlug: slug });\r\n  };\r\n\r\n  // Handle form submission\r\n  const onFinish = async (values) => {\r\n    try {\r\n      if (id) {\r\n        await axios.put(`/api/meta/update-meta/${id}`, values);\r\n        message.success(\"Meta data updated successfully!\");\r\n      } else {\r\n        await axios.post(\"/api/meta/add-meta\", values);\r\n        message.success(\"Meta data added successfully!\");\r\n        form.resetFields();\r\n      }\r\n      navigate(\"/meta-table\");\r\n    } catch (error) {\r\n      message.error(\"Failed to save meta data.\");\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Breadcrumb */}\r\n      <Breadcrumb style={{ marginBottom: 20 }}>\r\n        <Breadcrumb.Item>\r\n          <Link to=\"/dashboard\">Dashboard</Link>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <Link to=\"/meta-table\">Meta List</Link>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>{id ? \"Edit Meta\" : \"Add Meta\"}</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n\r\n      <Form form={form} layout=\"vertical\" onFinish={onFinish}>\r\n        <Form.Item\r\n          name=\"pageName\"\r\n          label=\"Page Name\"\r\n          rules={[{ required: true, message: \"Please select a page\" }]}\r\n        >\r\n          <Select placeholder=\"Select a page\" loading={loading} onChange={handlePageChange}>\r\n            <Option value=\"Static Page\">Static Page</Option>\r\n            {menuList.map((menu) => (\r\n              <React.Fragment key={menu._id}>\r\n                <Option value={menu.parent.name} style={{ fontWeight: \"bold\" }}>\r\n                  {menu.parent.name}\r\n                </Option>\r\n                {menu.children.map((child) => (\r\n                  <React.Fragment key={child._id}>\r\n                    <Option value={child.name} style={{ paddingLeft: 20 }}>\r\n                      ├── {child.name}\r\n                    </Option>\r\n                    {child.subChildren.map((subChild) => (\r\n                      <Option key={subChild._id} value={subChild.name} style={{ paddingLeft: 40 }}>\r\n                        ├──── {subChild.name}\r\n                      </Option>\r\n                    ))}\r\n                  </React.Fragment>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        {/* Page Slug Field */}\r\n        <Form.Item\r\n          name=\"pageSlug\"\r\n          label=\"Page Slug\"\r\n          rules={[{ required: true, message: \"Slug is required\" }]}\r\n        >\r\n          <Input placeholder=\"Auto-generated slug\"  />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"metaTitle\"\r\n          label=\"Meta Title\"\r\n          rules={[{ required: true, message: \"Please enter meta title\" }]}\r\n        >\r\n          <Input placeholder=\"Enter Meta Title\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"metaDescription\"\r\n          label=\"Meta Description\"\r\n          rules={[{ required: true, message: \"Please enter meta description\" }]}\r\n        >\r\n          <Input.TextArea placeholder=\"Enter Meta Description\" rows={4} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"metaKeyword\"\r\n          label=\"Meta Keywords\"\r\n          rules={[{ required: true, message: \"Please enter meta keywords\" }]}\r\n        >\r\n          <Input placeholder=\"Enter Meta Keywords\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            {id ? \"Update Meta\" : \"Add Meta\"}\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaticMetaForm;\r\n"],"names":["Option","Select","StaticMetaForm","form","Form","useForm","menuList","setMenuList","useState","loading","setLoading","id","useParams","navigate","useNavigate","useEffect","async","response","axios","get","data","Array","isArray","error","fetchMenus","then","success","metaData","setFieldsValue","pageName","pageSlug","metaTitle","metaDescription","metaKeyword","catch","children","jsxs","Breadcrumb","style","marginBottom","jsx","Item","Link","to","layout","onFinish","values","put","message","post","resetFields","name","label","rules","required","placeholder","onChange","value","slug","toLowerCase","replace","map","menu","React","Fragment","parent","fontWeight","child","paddingLeft","subChildren","subChild","_id","Input","TextArea","rows","Button","type","htmlType"],"mappings":"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"}