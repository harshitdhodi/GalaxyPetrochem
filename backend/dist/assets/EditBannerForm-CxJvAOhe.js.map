{"version":3,"file":"EditBannerForm-CxJvAOhe.js","sources":["../../src/websiteBackend/banner/EditBannerForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Button, message, Upload, Select, Breadcrumb } from 'antd';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useGetBannerByIdQuery, useUpdateBannerMutation } from '../../slice/banner/banner';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { UploadOutlined, HomeOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditBannerForm = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [form] = Form.useForm();\r\n    const [imageChanged, setImageChanged] = useState(false);\r\n    const [photoChanged, setPhotoChanged] = useState(false);\r\n    const [menuList, setMenuList] = useState([]);\r\n    const { data: banner, isLoading, refetch } = useGetBannerByIdQuery(id);\r\n    const [updateBanner] = useUpdateBannerMutation();\r\n\r\n    useEffect(() => {\r\n        // Fetch menu list for pageSlug dropdown\r\n        const fetchMenuList = async () => {\r\n            try {\r\n                const response = await axios.get('/api/menulist/get-menu');\r\n                if (response.data.success) {\r\n                    setMenuList(response.data.data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching menu list:', error);\r\n                message.error('Failed to fetch menu list');\r\n            }\r\n        };\r\n        fetchMenuList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (banner) {\r\n            form.setFieldsValue({\r\n                title: banner.title,\r\n                altName: banner.altName,\r\n                details: banner.details,\r\n                imgName: banner.imgName,\r\n                pageSlug: banner.pageSlug || '',\r\n                image: banner.image\r\n                    ? [{ name: banner.imgName, url: `/api/image/download/${banner.image}` }]\r\n                    : [],\r\n                photo: banner.photo\r\n                    ? [{ name: banner.photoName, url: `/api/photo/download/${banner.photo}` }]\r\n                    : [],\r\n            });\r\n        }\r\n    }, [banner, form]);\r\n\r\n    const handleImageChange = (info) => {\r\n        setImageChanged(true);\r\n        form.setFieldsValue({\r\n            imgName: info.file.name,\r\n            image: info.fileList,\r\n        });\r\n    };\r\n\r\n    const handlePhotoChange = (info) => {\r\n        setPhotoChanged(true);\r\n        form.setFieldsValue({\r\n            photo: info.fileList,\r\n        });\r\n    };\r\n\r\n    const onFinish = async (values) => {\r\n        try {\r\n            if (!values.title?.trim()) {\r\n                message.error('Title is required');\r\n                return;\r\n            }\r\n            if (!values.altName?.trim()) {\r\n                message.error('Alt Name is required');\r\n                return;\r\n            }\r\n            if (!values.pageSlug) {\r\n                message.error('Page Slug is required');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n\r\n            if (imageChanged && values.image?.[0]?.originFileObj) {\r\n                formData.append('image', values.image[0].originFileObj);\r\n                formData.append('imgName', values.image[0].name);\r\n            } else {\r\n                formData.append('imgName', values.imgName || banner.imgName);\r\n            }\r\n\r\n            if (photoChanged && values.photo?.[0]?.originFileObj) {\r\n                formData.append('photo', values.photo[0].originFileObj);\r\n            } else if (banner.photo) {\r\n                formData.append('photo', banner.photo);\r\n            }\r\n\r\n            formData.append('title', values.title.trim());\r\n            formData.append('altName', values.altName.trim());\r\n            formData.append('details', values.details?.trim() || '');\r\n            formData.append('pageSlug', values.pageSlug);\r\n\r\n            await updateBanner({\r\n                id,\r\n                bannerData: formData,\r\n            });\r\n\r\n            message.success('Banner updated successfully');\r\n            refetch(); // Refetch the banner data to get the updated data\r\n            navigate('/banner-table');\r\n        } catch (error) {\r\n            console.error(error);\r\n            message.error('Failed to update banner');\r\n        }\r\n    };\r\n\r\n    if (isLoading) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <Breadcrumb style={{ padding: '16px 24px' }}>\r\n                <Breadcrumb.Item>\r\n                    <Link to=\"/dashboard\">\r\n                        <HomeOutlined /> Dashboard\r\n                    </Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item>\r\n                    <Link to=\"/banner-table\">Banner Management</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item>Edit Banner</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n\r\n            <div style={{ padding: '24px' }}>\r\n                <h1 className=\"text-2xl font-bold mb-6\">Edit Banner</h1>\r\n                <Form\r\n                    form={form}\r\n                    layout=\"vertical\"\r\n                    onFinish={onFinish}\r\n                    initialValues={{\r\n                        title: banner?.title || '',\r\n                        altName: banner?.altName || '',\r\n                        details: banner?.details || '',\r\n                        imgName: banner?.imgName || '',\r\n                        pageSlug: banner?.pageSlug || '',\r\n                        image: banner?.image\r\n                            ? [{ name: banner.imgName, url: `/api/image/download/${banner.image}` }]\r\n                            : [],\r\n                        photo: banner?.photo\r\n                            ? [{ name: banner.photoName, url: `/api/image/download/${banner.photo}` }]\r\n                            : [],\r\n                    }}\r\n                >\r\n\r\n                    <Form.Item\r\n                        name=\"pageSlug\"\r\n                        label=\"Page Slug\"\r\n                        rules={[{ required: true, message: 'Please select a Page Slug!' }]}\r\n                    >\r\n                        <Select placeholder=\"Select Page Slug\">\r\n                            {menuList.map((menu) => (\r\n                                <Option key={menu._id} value={menu.parent.path}>\r\n                                    {menu.parent.name}\r\n                                </Option>\r\n                            ))}\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"image\" label=\"Banner Image\" valuePropName=\"fileList\" getValueFromEvent={(e) => e && e.fileList}>\r\n                        <Upload\r\n                            maxCount={1}\r\n                            listType=\"picture\"\r\n                            beforeUpload={() => false}\r\n                            onChange={handleImageChange}\r\n                            defaultFileList={\r\n                                banner?.image\r\n                                    ? [{ name: banner.imgName, url: `/api/image/download/${banner.image}` }]\r\n                                    : []\r\n                            }\r\n                        >\r\n                            <Button icon={<UploadOutlined />}>\r\n                                {imageChanged ? 'Change Image' : 'Upload New Image'}\r\n                            </Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item name=\"photo\" label=\"Photo\" valuePropName=\"fileList\" getValueFromEvent={(e) => e && e.fileList}>\r\n                        <Upload\r\n                            maxCount={1}\r\n                            listType=\"picture\"\r\n                            beforeUpload={() => false}\r\n                            onChange={handlePhotoChange}\r\n                            defaultFileList={\r\n                                banner?.photo\r\n                                    ? [{ name: banner.photoName, url: `/api/photo/download/${banner.photo}` }]\r\n                                    : []\r\n                            }\r\n                        >\r\n                            <Button icon={<UploadOutlined />}>\r\n                                {photoChanged ? 'Change Photo' : 'Upload New Photo'}\r\n                            </Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"imgName\"\r\n                        label=\"Image Name\"\r\n                        rules={[{ required: true, message: 'Please input image name!' }]}\r\n                    >\r\n                        <Input disabled={imageChanged} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"title\"\r\n                        label=\"Title\"\r\n                        rules={[{ required: true, message: 'Please input title!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"altName\"\r\n                        label=\"Alt Name\"\r\n                        rules={[{ required: true, message: 'Please input alt name!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"details\"\r\n                        label=\"Details\"\r\n                        rules={[{ message: 'Please input details!' }]}\r\n                    >\r\n                        <ReactQuill theme=\"snow\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Update\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditBannerForm;"],"names":["Option","Select","EditBannerForm","id","useParams","navigate","useNavigate","form","Form","useForm","imageChanged","setImageChanged","useState","photoChanged","setPhotoChanged","menuList","setMenuList","data","banner","isLoading","refetch","useGetBannerByIdQuery","updateBanner","useUpdateBannerMutation","useEffect","async","response","axios","get","success","error","message","fetchMenuList","setFieldsValue","title","altName","details","imgName","pageSlug","image","name","url","photo","photoName","jsx","children","jsxs","Breadcrumb","style","padding","Item","Link","to","HomeOutlined","className","layout","onFinish","values","trim","formData","FormData","originFileObj","append","bannerData","initialValues","label","rules","required","placeholder","map","menu","value","parent","path","_id","valuePropName","getValueFromEvent","e","fileList","Upload","maxCount","listType","beforeUpload","onChange","info","file","defaultFileList","Button","icon","UploadOutlined","Input","disabled","ReactQuill","theme","type","htmlType"],"mappings":"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"}