{"version":3,"file":"index.esm-nvYjwl0o.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","children","createElement","Provider","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","methods","_name","_subjects","values","updateValue","_formValues","useState","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_updateFormState","state","_updateValid","useMemo","useFormState","_registerProps","register","rules","fieldState","defineProperties","invalid","enumerable","isTouched","error","field","onChange","onBlur","ref","elm","_fields","_f","focus","select","setCustomValidity","message","reportValidity","_shouldUnregisterField","_options","updateMounted","mount","_state","action","unregister","_updateDisabledField","fields","Controller","render","appendErrors","validateAllFieldCriteria","types","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","appendAt","fillEmptyArray","insert","moveArrayAt","from","to","splice","prependAt","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","updateAt","fieldValues","useFieldArray","keyName","setFields","_getFieldArray","ids","_fieldIds","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValues","_updateFieldArray","isSubmitted","resolver","_executeSchema","then","existingError","reValidateMode","criteriaMode","swap","argA","argB","move","prepend","prependValue","append","appendValue","remove","insertValue","update","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","ASYNC_FUNCTION","schemaErrorLookup","join","foundError","pop","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldReference","validateFunction","fieldError","getValues","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","all","getFieldState","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","method","args","shouldSetValues","shouldUpdateFieldsAndState","unsetEmptyArray","_resetDefaultValues","resetOptions","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"mappings":"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","x_google_ignoreList":[0]}