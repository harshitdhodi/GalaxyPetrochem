{"version":3,"file":"SupplierForm-CdMOQTfN.js","sources":["../../src/supplier/SupplierForm.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { X } from 'lucide-react'\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { BreadcrumbWithCustomSeparator } from \"@/breadCrumb/BreadCrumb\"\r\nimport { useGetSuppliersQuery } from '@/slice/supplierSlice/SupplierSlice'\r\nimport Swal from 'sweetalert2'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n\r\nconst breadcrumbItems = [\r\n  { label: \"Dashboard\", href: \"/dashboard\" },\r\n  { label: \"Supplier Table\", href: \"/supplier-table\" },\r\n  { label: \"Supplier Form\", href: \"/supplier-form\" }, // No `href` indicates the current page\r\n]\r\n\r\nexport default function SupplierForm() {\r\n  const navigate = useNavigate()\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [submitError, setSubmitError] = useState(null)\r\n  const [imagePreview, setImagePreview] = useState(null) // State for image preview\r\n  const { refetch } = useGetSuppliersQuery()\r\n  const form = useForm({\r\n    defaultValues: {\r\n      supplierName: \"\",\r\n      contactPerson: \"\",\r\n      email: \"\",\r\n      website: \"\",\r\n      mobileNumber: \"\",\r\n      phoneNumber: \"\",\r\n      address: \"\",\r\n      country: \"\",\r\n      city: \"\",\r\n      description: \"\",\r\n      image: null, // For image file input\r\n    },\r\n  })\r\n  const [countries, setCountries] = useState([])\r\n  const [cities, setCities] = useState([])\r\n  \r\n  // Fetch countries when component mounts\r\n  useEffect(() => {\r\n    fetch('https://restcountries.com/v3.1/all')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const sortedCountries = data\r\n          .map(country => ({\r\n            name: country.name.common,\r\n            code: country.cca2\r\n          }))\r\n          .sort((a, b) => a.name.localeCompare(b.name));\r\n        setCountries(sortedCountries);\r\n      })\r\n      .catch(error => console.error('Error fetching countries:', error));\r\n  }, []);\r\n\r\n  // Fetch cities when country changes\r\n  const handleCountryChange = async (countryName) => {\r\n    try {\r\n      const response = await fetch(`https://api.api-ninjas.com/v1/city?country=${countryName}&limit=30`, {\r\n        headers: {\r\n          'X-Api-Key': 'YOUR_API_NINJAS_KEY'\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      const cityNames = data.map(city => city.name).sort();\r\n      setCities(cityNames);\r\n      form.setValue('city', ''); // Reset city when country changes\r\n    } catch (error) {\r\n      console.error('Error fetching cities:', error);\r\n    }\r\n  };\r\n\r\n  // Handle image selection and preview\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0]\r\n    if (file) {\r\n      setImagePreview(URL.createObjectURL(file)) // Set the preview URL\r\n    }\r\n  }\r\n\r\n  async function onSubmit(values) {\r\n    setIsSubmitting(true)\r\n    setSubmitError(null)\r\n\r\n    const formData = new FormData();\r\n    // Append form data, including image files\r\n    Object.keys(values).forEach(key => {\r\n      if (key === 'image' && values.image) {\r\n        formData.append('image', values.image[0]); // Assuming a single image file is selected\r\n      } else {\r\n        formData.append(key, values[key]);\r\n      }\r\n    });\r\n\r\n    try {\r\n      const response = await fetch('/api/supplier/add', {\r\n        method: 'POST',\r\n        body: formData, // Send the FormData object\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to submit form')\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      // Refetch suppliers data after successful submission\r\n      await refetch()\r\n      \r\n      // Show success message\r\n      await Swal.fire({\r\n        title: 'Success!',\r\n        text: 'Supplier added successfully',\r\n        icon: 'success',\r\n        timer: 2000,\r\n        showConfirmButton: false\r\n      })\r\n\r\n      navigate(\"/supplier-table\")\r\n    } catch (error) {\r\n      console.error('Error submitting form:', error)\r\n      setSubmitError('Failed to submit form. Please try again.')\r\n      \r\n      // Show error message\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: error.message || 'Failed to add supplier',\r\n        icon: 'error'\r\n      })\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ml-1\">\r\n        <BreadcrumbWithCustomSeparator items={breadcrumbItems} />\r\n      </div> \r\n\r\n      <Card className=\"max-w-8xl mt-3 mx-auto\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-xl font-semibold\">Add Supplier</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n\r\n          <Form {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n              <div className=\"grid gap-4 md:grid-cols-2\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>\r\n                        Supplier Name <span className=\"text-red-500\">*</span>\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter supplier name\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"contact_person\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Contact Person</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter contact person\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>\r\n                        Email <span className=\"text-red-500\">*</span>\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter email address\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"website\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Website</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter website URL\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"mobile\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Mobile Number</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter mobile number\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"country\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>\r\n                        Country <span className=\"text-red-500\">*</span>\r\n                      </FormLabel>\r\n                      <Select \r\n                        onValueChange={(value) => {\r\n                          field.onChange(value);\r\n                          handleCountryChange(value);\r\n                        }}\r\n                        value={field.value}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger>\r\n                            <SelectValue placeholder=\"Select country\" />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {countries.map((country) => (\r\n                            <SelectItem key={country.code} value={country.name}>\r\n                              {country.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"city\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>\r\n                        City <span className=\"text-red-500\">*</span>\r\n                      </FormLabel>\r\n                      <Select\r\n                        onValueChange={field.onChange}\r\n                        value={field.value}\r\n                        disabled={!form.watch('country')}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger>\r\n                            <SelectValue placeholder=\"Select city\" />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {cities.map((city) => (\r\n                            <SelectItem key={city} value={city}>\r\n                              {city}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"address\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>\r\n                      Address <span className=\"text-red-500\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <Textarea placeholder=\"Enter address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {/* Image upload input */}\r\n              <FormField\r\n                control={form.control}\r\n                name=\"image\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Upload Image</FormLabel>\r\n                    <FormControl>\r\n                      <Input type=\"file\" {...field} onChange={handleImageChange} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {/* Show the image preview if available */}\r\n              {imagePreview && (\r\n                <div className=\"mt-4\">\r\n                  <img src={imagePreview} alt=\"Image preview\" className=\"w-32 h-32 object-cover rounded-lg\" />\r\n                  <Button\r\n                    type=\"button\"\r\n                    onClick={() => setImagePreview(null)}\r\n                    className=\"absolute top-0 right-0 bg-red-500 text-white p-1 rounded-full\"\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex gap-4\">\r\n                <Button type=\"submit\" className=\"bg-green-500 w-1/4 font-medium hover:bg-green-600 text-lg\" disabled={isSubmitting}>\r\n                  Save\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n"],"names":["breadcrumbItems","label","href","SupplierForm","navigate","useNavigate","isSubmitting","setIsSubmitting","useState","submitError","setSubmitError","imagePreview","setImagePreview","refetch","useGetSuppliersQuery","form","useForm","defaultValues","supplierName","contactPerson","email","website","mobileNumber","phoneNumber","address","country","city","description","image","countries","setCountries","cities","setCities","useEffect","fetch","then","response","json","data","sortedCountries","map","name","common","code","cca2","sort","a","b","localeCompare","catch","error","handleImageChange","e","file","target","files","URL","createObjectURL","jsxs","Fragment","children","jsx","className","BreadcrumbWithCustomSeparator","items","Card","CardHeader","CardTitle","CardContent","Form","onSubmit","handleSubmit","async","values","formData","FormData","Object","keys","forEach","key","append","method","body","ok","Error","Swal","fire","title","text","icon","timer","showConfirmButton","message","FormField","control","render","field","FormItem","FormLabel","FormControl","Input","placeholder","FormMessage","Select","onValueChange","value","onChange","countryName","headers","cityNames","setValue","handleCountryChange","SelectTrigger","SelectValue","SelectContent","SelectItem","disabled","watch","Textarea","type","src","alt","Button","onClick","X"],"mappings":"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"}