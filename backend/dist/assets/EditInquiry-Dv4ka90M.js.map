{"version":3,"file":"EditInquiry-Dv4ka90M.js","sources":["../../src/inquiry/EditInquiry.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { \r\n    Select, \r\n    SelectContent, \r\n    SelectItem, \r\n    SelectTrigger, \r\n    SelectValue \r\n} from \"@/components/ui/select\";\r\nimport { \r\n    Form, \r\n    FormControl, \r\n    FormField, \r\n    FormItem, \r\n    FormLabel, \r\n    FormMessage \r\n} from \"@/components/ui/form\";\r\nimport { useAddInquiryMutation, useGetInquiryByIdQuery, useUpdateInquiryMutation } from \"@/slice/inquiry/inquiry\";\r\nimport * as z from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { useNavigate, useParams } from 'react-router-dom'; // Import useNavigate and useParams\r\nimport { BreadcrumbWithCustomSeparator } from '@/breadCrumb/BreadCrumb';\r\nimport { useGetAllStatusesQuery } from '@/slice/status/status';\r\n\r\nconst breadcrumbItems = [\r\n    { label: \"Dashboard\", href: \"/dashboard\" },\r\n    { label: \"Inquiry Table\", href: \"/inquiry-list\" },\r\n    { label: \"Inquiry Form\", href: null }, // No `href` indicates the current page\r\n]\r\n// Define validation schema\r\nconst inquirySchema = z.object({\r\n    companyName: z.string().min(2, { message: \"Company name must be at least 2 characters\" }),\r\n    name: z.string().min(2, { message: \"Full name must be at least 2 characters\" }),\r\n    email: z.string().email({ message: \"Invalid email address\" }),\r\n    mobile: z.string()\r\n        .regex(/^[0-9]{10}$/, { message: \"Mobile number must be 10 digits\" }),\r\n    address: z.string().min(2, { message: \"Address must be at least 2 characters\" }),\r\n    status: z.string({ required_error: \"Please select a status\" })\r\n});\r\n\r\nexport default function EditInquiryForm({ onClose }) {\r\n    const { id } = useParams();  // Use the id from route params\r\n    const navigate = useNavigate(); // Initialize useNavigate\r\n    const { data: inquiryData, isLoading: isFetching } = useGetInquiryByIdQuery(id); // Fetch inquiry data by id\r\n    const [updateInquiry, { isLoading }] = useUpdateInquiryMutation();\r\n    const { data: statusesData, isLoading: isLoadingStatuses } = useGetAllStatusesQuery();\r\n\r\n    // Initialize form with zod resolver\r\n    const form = useForm({\r\n        resolver: zodResolver(inquirySchema),\r\n        defaultValues: {\r\n            companyName: \"\",\r\n            name: \"\",\r\n            email: \"\",\r\n            mobile: \"\",\r\n            address: \"\",\r\n            status: \"New Inquiry\"\r\n        }\r\n    });\r\n\r\n    // Set form values when inquiry data is fetched\r\n    useEffect(() => {\r\n        if (inquiryData) {\r\n            form.reset({\r\n                companyName: inquiryData.companyName || \"\",\r\n                name: inquiryData.name || \"\",\r\n                email: inquiryData.email || \"\",\r\n                mobile: inquiryData.mobile || \"\",\r\n                address: inquiryData.address || \"\",\r\n                status: inquiryData.status || \"New Inquiry\"\r\n            });\r\n        }\r\n    }, [inquiryData, form]);\r\n\r\n    // Handle form submission\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            // Perform update mutation\r\n            const response = await updateInquiry({ id, ...data }).unwrap();\r\n            \r\n            // Reset form\r\n            form.reset();\r\n\r\n            // Redirect to the inquiry list page\r\n            navigate('/inquiry-list');\r\n        } catch (error) {\r\n            // Handle error\r\n            alert({\r\n                title: \"Error\",\r\n                description: error?.data?.message || \"Failed to update inquiry\",\r\n                variant: \"destructive\"\r\n            });\r\n        }\r\n    };\r\n\r\n    if (isFetching) return <div>Loading...</div>;  // Loading state\r\n\r\n    return (\r\n        <>\r\n          <div className=\"ml-1\">\r\n                <BreadcrumbWithCustomSeparator items={breadcrumbItems} />\r\n\r\n            </div>\r\n        <Form {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 p-4\">\r\n                <h2 className=\"text-xl font-semibold mb-4\">Update Inquiry</h2>\r\n                \r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"companyName\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Company Name</FormLabel>\r\n                            <FormControl>\r\n                                <Input \r\n                                    placeholder=\"Enter company name\" \r\n                                    {...field} \r\n                                />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"name\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Full Name</FormLabel>\r\n                            <FormControl>\r\n                                <Input \r\n                                    placeholder=\"Enter full name\" \r\n                                    {...field} \r\n                                />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"email\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Email</FormLabel>\r\n                            <FormControl>\r\n                                <Input \r\n                                    type=\"email\"\r\n                                    placeholder=\"Enter email\" \r\n                                    {...field} \r\n                                />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"mobile\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Mobile Number</FormLabel>\r\n                            <FormControl>\r\n                                <Input \r\n                                    type=\"tel\"\r\n                                    placeholder=\"Enter 10-digit mobile\" \r\n                                    {...field} \r\n                                />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"address\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Address</FormLabel>\r\n                            <FormControl>\r\n                                <Input \r\n                                    placeholder=\"Enter address\" \r\n                                    {...field} \r\n                                />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <FormField\r\n                    control={form.control}\r\n                    name=\"status\"\r\n                    render={({ field }) => (\r\n                        <FormItem>\r\n                            <FormLabel>Status</FormLabel>\r\n                            <Select \r\n                                onValueChange={field.onChange} \r\n                                defaultValue={field.value}\r\n                            >\r\n                                <FormControl>\r\n                                    <SelectTrigger>\r\n                                        <SelectValue placeholder=\"Select status\" />\r\n                                    </SelectTrigger>\r\n                                </FormControl>\r\n                                <SelectContent>\r\n                                    {statusesData?.data?.map((statusItem) => (\r\n                                        <SelectItem key={statusItem._id} value={statusItem.status}>\r\n                                            {statusItem.status}\r\n                                        </SelectItem>\r\n                                    ))}\r\n                                </SelectContent>\r\n                            </Select>\r\n                            <FormMessage />\r\n                        </FormItem>\r\n                    )}\r\n                />\r\n\r\n                <div className=\"flex justify-end space-x-2 pt-4\">\r\n                    <Button \r\n                        type=\"submit\" \r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? \"Updating...\" : \"Update Inquiry\"}\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n"],"names":["breadcrumbItems","label","href","inquirySchema","z.object","companyName","z.string","min","message","name","email","mobile","regex","address","status","required_error","EditInquiryForm","onClose","id","useParams","navigate","useNavigate","data","inquiryData","isLoading","isFetching","useGetInquiryByIdQuery","updateInquiry","useUpdateInquiryMutation","statusesData","isLoadingStatuses","useGetAllStatusesQuery","form","useForm","resolver","zodResolver","defaultValues","useEffect","reset","jsx","children","jsxs","Fragment","className","BreadcrumbWithCustomSeparator","items","Form","onSubmit","handleSubmit","async","unwrap","error","alert","title","description","variant","FormField","control","render","field","FormItem","FormLabel","FormControl","Input","placeholder","FormMessage","type","Select","onValueChange","onChange","defaultValue","value","SelectTrigger","SelectValue","SelectContent","map","statusItem","SelectItem","_id","Button","disabled"],"mappings":"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"}