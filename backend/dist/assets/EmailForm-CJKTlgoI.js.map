{"version":3,"file":"EmailForm-CJKTlgoI.js","sources":["../../node_modules/lucide-react/dist/esm/icons/upload.js","../../src/email/emailForm/EmailForm.jsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Upload = createLucideIcon(\"Upload\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"17 8 12 3 7 8\", key: \"t8dd8p\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"3\", y2: \"15\", key: \"widbto\" }]\n]);\n\nexport { Upload as default };\n//# sourceMappingURL=upload.js.map\n","import { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport ReactQuill from 'react-quill';\r\nimport { Upload, X } from 'lucide-react';\r\nimport { useGetAllTemplatesQuery } from '@/slice/template/emailTemplate';\r\nimport { useSendEmailMutation } from '@/slice/smtpSlice/email';\r\nimport { useGetEmailCategoriesQuery } from '@/slice/emailCategory/emailCategory';\r\n\r\nconst formSchema = z.object({\r\n  category: z.string().min(1, 'Please select a category'),\r\n  template: z.string().min(1, 'Please select a template'),\r\n  email: z.string().min(1, 'To field is required').email('Invalid email format'),\r\n  cc_email: z.array(z.string()).optional(),\r\n  subject: z.string().min(1, 'Subject is required'),\r\n  body: z.string().min(1, 'Body is required'),\r\n  attachment: z.any().optional(),\r\n});\r\n\r\nexport default function EmailForm({ defaultTo = \"\", onSuccess }) {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const { data: categories, isLoading: isCategoriesLoading } = useGetEmailCategoriesQuery();\r\n  const { data: templates, isLoading: isTemplatesLoading } = useGetAllTemplatesQuery();\r\n  const [sendEmail, { isLoading: isSending }] = useSendEmailMutation();\r\n  const [attachment, setAttachment] = useState(null);\r\n  const [ccEmails, setCcEmails] = useState([]); // Array to store CC emails\r\n  const [filteredTemplates, setFilteredTemplates] = useState([]);\r\nconsole.log(templates.data)\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm({\r\n    resolver: zodResolver(formSchema),\r\n  });\r\n\r\n  const selectedCategory = watch('category');\r\n  const selectedTemplate = watch('template');\r\n  const body = watch('body');\r\n\r\n  // Update subject and body when template changes\r\n  useEffect(() => {\r\n    if (selectedTemplate && templates?.data) {\r\n      const template = templates.data.find((t) => t._id === selectedTemplate);\r\n      if (template) {\r\n        setValue('subject', template.subject);\r\n        setValue('body', template.body);\r\n      }\r\n    }\r\n  }, [selectedTemplate, templates, setValue]);\r\n\r\n  // Update the form when defaultTo changes\r\n  useEffect(() => {\r\n    if (defaultTo) {\r\n      setValue('email', defaultTo);\r\n    }\r\n  }, [defaultTo, setValue]);\r\n\r\n  // Handle file changes\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    setAttachment(file);\r\n  };\r\n\r\n  // Remove an attachment\r\n  const removeAttachment = () => {\r\n    setAttachment(null);\r\n  };\r\n\r\n  // Add a new email to CC list\r\n  const addCcEmail = (email) => {\r\n    if (email && !ccEmails.includes(email)) {\r\n      setCcEmails((prev) => [...prev, email]);\r\n    }\r\n  };\r\n\r\n  // Remove an email from CC list\r\n  const removeCcEmail = (index) => {\r\n    setCcEmails((prev) => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData();\r\n    formData.append('email', data.email);\r\n    formData.append('cc_email', ccEmails);\r\n    formData.append('subject', data.subject);\r\n    formData.append('body', data.body);\r\n\r\n    if (attachment) {\r\n      formData.append('attachment', attachment);\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    try {\r\n      await sendEmail(formData).unwrap();\r\n      alert('Email sent successfully!');\r\n      reset();\r\n      setAttachment(null);\r\n      setCcEmails([]);\r\n      onSuccess?.(); // Call the success callback if provided\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n      alert('Failed to send email. Please try again.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Update filtered templates when category changes\r\n  useEffect(() => {\r\n    if (selectedCategory && templates?.data) {\r\n      const filtered = templates.data.filter(\r\n        (template) => template.category?.emailCategory === selectedCategory\r\n      );\r\n      setFilteredTemplates(filtered);\r\n      setValue('template', '');\r\n    }\r\n  }, [selectedCategory, templates, setValue]);\r\n\r\n  return (\r\n    <Card className=\"w-full mx-auto max-h-[80vh] flex flex-col\">\r\n      <CardContent className=\"p-6 overflow-y-auto\">\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n          {/* Category and Template Selection Row */}\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            {/* Category Selection */}\r\n            <div className=\"space-y-2\">\r\n              <label htmlFor=\"category\" className=\"text-sm font-medium\">\r\n                Select Category\r\n              </label>\r\n              <Select onValueChange={(value) => setValue('category', value)}>\r\n                <SelectTrigger id=\"category\">\r\n                  <SelectValue placeholder=\"Select Category\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {isCategoriesLoading ? (\r\n                    <SelectItem disabled>Loading categories...</SelectItem>\r\n                  ) : categories && categories.length > 0 ? (\r\n                    categories.map((category) => (\r\n                      <SelectItem key={category._id} value={category.emailCategory}>\r\n                        {category.emailCategory}\r\n                      </SelectItem>\r\n                    ))\r\n                  ) : (\r\n                    <SelectItem disabled>No categories available</SelectItem>\r\n                  )}\r\n                </SelectContent>\r\n              </Select>\r\n              {errors.category && (\r\n                <p className=\"text-sm text-red-500\">{errors.category.message}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Template Selection */}\r\n            <div className=\"space-y-2\">\r\n              <label htmlFor=\"template\" className=\"text-sm font-medium\">\r\n                Select Email Template\r\n              </label>\r\n              <Select \r\n                onValueChange={(value) => setValue('template', value)}\r\n                disabled={!selectedCategory}\r\n              >\r\n                <SelectTrigger id=\"template\">\r\n                  <SelectValue placeholder={\r\n                    selectedCategory \r\n                      ? \"Select Email Template\" \r\n                      : \"Please select a category first\"\r\n                  } />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {isTemplatesLoading ? (\r\n                    <SelectItem disabled>Loading templates...</SelectItem>\r\n                  ) : filteredTemplates.length === 0 ? (\r\n                    <SelectItem disabled>No templates in this category</SelectItem>\r\n                  ) : (\r\n                    filteredTemplates.map((template) => (\r\n                      <SelectItem key={template._id} value={template._id}>\r\n                        {template.name}\r\n                      </SelectItem>\r\n                    ))\r\n                  )}\r\n                </SelectContent>\r\n              </Select>\r\n              {errors.template && (\r\n                <p className=\"text-sm text-red-500\">{errors.template.message}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Email Fields Row */}\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            {/* To Field */}\r\n            <div className=\"space-y-2\">\r\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\r\n                To*\r\n              </label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"text\"\r\n                placeholder=\"Recipient email\"\r\n                {...register('email')}\r\n                aria-invalid={errors.email ? 'true' : 'false'}\r\n              />\r\n              {errors.email && <p className=\"text-sm text-red-500\">{errors.email.message}</p>}\r\n            </div>\r\n\r\n            {/* CC Field */}\r\n            <div className=\"space-y-2\">\r\n              <label htmlFor=\"cc_email\" className=\"text-sm font-medium\">\r\n                CC\r\n              </label>\r\n              <div className=\"relative\">\r\n                <Input\r\n                  id=\"cc_email\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter CC email\"\r\n                  onBlur={(e) => {\r\n                    addCcEmail(e.target.value);\r\n                    e.target.value = ''; // Clear input after adding\r\n                  }}\r\n                />\r\n                {ccEmails.length > 0 && (\r\n                  <div className=\"absolute top-full mt-1 z-10 bg-white border rounded-md p-2 w-full shadow-sm\">\r\n                    {ccEmails.map((email, index) => (\r\n                      <div key={index} className=\"flex items-center justify-between py-1\">\r\n                        <span className=\"text-sm\">{email}</span>\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => removeCcEmail(index)}\r\n                        >\r\n                          <X className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Subject Field */}\r\n            <div className=\"space-y-2\">\r\n              <label htmlFor=\"subject\" className=\"text-sm font-medium\">\r\n                Subject*\r\n              </label>\r\n              <Input\r\n                id=\"subject\"\r\n                type=\"text\"\r\n                placeholder=\"Subject\"\r\n                {...register('subject')}\r\n                aria-invalid={errors.subject ? 'true' : 'false'}\r\n              />\r\n              {errors.subject && (\r\n                <p className=\"text-sm text-red-500\">{errors.subject.message}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Body Field */}\r\n          <div className=\"space-y-2\">\r\n            <label htmlFor=\"body\" className=\"text-sm font-medium\">\r\n              Body*\r\n            </label>\r\n            <ReactQuill\r\n              value={body || ''}\r\n              onChange={(content) => setValue('body', content)}\r\n              className=\"bg-white\"\r\n            />\r\n            {errors.body && <p className=\"text-sm text-red-500\">{errors.body.message}</p>}\r\n          </div>\r\n\r\n          {/* Attachments */}\r\n          <div className=\"space-y-2\">\r\n            <label htmlFor=\"file-upload\" className=\"text-sm font-medium\">\r\n              Attachments\r\n            </label>\r\n            <div className=\"border-2 border-dashed rounded-lg p-6 text-center\">\r\n              <input\r\n                type=\"file\"\r\n                onChange={handleFileChange}\r\n                className=\"hidden\"\r\n                id=\"file-upload\"\r\n              />\r\n              <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\r\n                <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n                <p className=\"mt-2 text-sm text-gray-600\">\r\n                  Drag and drop files here or click to browse\r\n                </p>\r\n              </label>\r\n            </div>\r\n            {attachment && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"flex items-center justify-between bg-gray-100 p-2 rounded\">\r\n                  <span className=\"text-sm truncate\">{attachment.name}</span>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={removeAttachment}\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting || isSending}>\r\n            {isSubmitting || isSending ? 'Sending...' : 'Send Email'}\r\n          </Button>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"],"names":["Upload","createLucideIcon","d","key","points","x1","x2","y1","y2","formSchema","z.object","category","z.string","min","template","email","cc_email","z.array","optional","subject","body","attachment","z.any","EmailForm","defaultTo","onSuccess","isSubmitting","setIsSubmitting","useState","data","categories","isLoading","isCategoriesLoading","useGetEmailCategoriesQuery","templates","isTemplatesLoading","useGetAllTemplatesQuery","sendEmail","isSending","useSendEmailMutation","setAttachment","ccEmails","setCcEmails","filteredTemplates","setFilteredTemplates","register","handleSubmit","formState","errors","reset","watch","setValue","useForm","resolver","zodResolver","selectedCategory","selectedTemplate","useEffect","find","t","_id","filtered","filter","emailCategory","jsx","Card","className","children","CardContent","jsxs","onSubmit","async","formData","FormData","append","unwrap","alert","error","htmlFor","Select","onValueChange","value","SelectTrigger","id","SelectValue","placeholder","SelectContent","SelectItem","disabled","length","map","message","name","Input","type","onBlur","e","target","includes","prev","index","Button","variant","size","onClick","_","i","removeCcEmail","X","ReactQuill","onChange","content","file","files"],"mappings":"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","x_google_ignoreList":[0]}