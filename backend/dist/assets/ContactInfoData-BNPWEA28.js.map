{"version":3,"file":"ContactInfoData-BNPWEA28.js","sources":["../../src/websiteBackend/contactInfo/ContactInfoData.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAddUserMutation, useUpdateUserMutation, useGetAllUsersQuery } from '@/slice/contactInfo/contactInfo';\r\n\r\nconst ContactInfoForm = () => {\r\n    const [formData, setFormData] = useState({\r\n        address: '',\r\n        mobiles: [''],\r\n        emails: [''],\r\n        imgTitle: [''],\r\n        altName: [''],\r\n        photo: [],\r\n        previewUrls: []\r\n    });\r\n\r\n    const [addUser] = useAddUserMutation();\r\n    const [updateUser] = useUpdateUserMutation();\r\n    const { data: allUsers } = useGetAllUsersQuery();\r\n\r\n    // Populate form with existing data when component loads\r\n    useEffect(() => {\r\n        if (allUsers && allUsers.length > 0) {\r\n            const existingData = allUsers[0];\r\n            setFormData({\r\n                address: existingData.address,\r\n                mobiles: existingData.mobiles,\r\n                emails: existingData.emails,\r\n                imgTitle: existingData.imgTitle || [''],\r\n                altName: existingData.altName || [''],\r\n                photo: [],\r\n                previewUrls: existingData.photo ? existingData.photo.map(p => `/api/image/download/${p}`) : []\r\n            });\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const handleFileChange = (e) => {\r\n        const files = Array.from(e.target.files);\r\n        const newPreviewUrls = files.map(file => URL.createObjectURL(file));\r\n        \r\n        setFormData(prev => ({\r\n            ...prev,\r\n            photo: files,\r\n            previewUrls: [...newPreviewUrls],\r\n            imgTitle: files.map(() => ''),\r\n            altName: files.map(() => '')\r\n        }));\r\n    };\r\n\r\n    // Clean up object URLs when component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            formData.previewUrls.forEach(url => {\r\n                if (url.startsWith('blob:')) {\r\n                    URL.revokeObjectURL(url);\r\n                }\r\n            });\r\n        };\r\n    }, [formData.previewUrls]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        const submitFormData = new FormData();\r\n        submitFormData.append('address', formData.address);\r\n        formData.mobiles.forEach(mobile => {\r\n            submitFormData.append('mobiles[]', mobile);\r\n        });\r\n        formData.emails.forEach(email => {\r\n            submitFormData.append('emails[]', email);\r\n        });\r\n        \r\n        // Handle arrays for image-related fields\r\n        formData.imgTitle.forEach((title, index) => {\r\n            submitFormData.append('imgTitle[]', title);\r\n        });\r\n        \r\n        formData.altName.forEach((alt, index) => {\r\n            submitFormData.append('altName[]', alt);\r\n        });\r\n        \r\n        // Handle multiple photo uploads\r\n        if (formData.photo.length > 0) {\r\n            formData.photo.forEach(file => {\r\n                submitFormData.append('photo[]', file);\r\n            });\r\n        } else if (allUsers && allUsers[0]?.photo) {\r\n            // If no new photos selected, keep the existing ones\r\n            allUsers[0].photo.forEach(photoUrl => {\r\n                submitFormData.append('photo[]', photoUrl);\r\n            });\r\n        }\r\n\r\n        try {\r\n            if (allUsers && allUsers.length > 0) {\r\n                await updateUser({ \r\n                    id: allUsers[0]._id, \r\n                    formData: submitFormData \r\n                }).unwrap();\r\n            } else {\r\n                await addUser(submitFormData).unwrap();\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-2xl mx-auto p-4\">\r\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n                {/* Address Field */}\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700\">Address</label>\r\n                    <textarea\r\n                        value={formData.address}\r\n                        onChange={(e) => setFormData(prev => ({\r\n                            ...prev,\r\n                            address: e.target.value\r\n                        }))}\r\n                        className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                {/* Mobile Numbers */}\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700\">Mobile Numbers</label>\r\n                    {formData.mobiles.map((mobile, index) => (\r\n                        <div key={index} className=\"flex gap-2 mt-1\">\r\n                            <input\r\n                                type=\"tel\"\r\n                                value={mobile}\r\n                                onChange={(e) => setFormData(prev => {\r\n                                    const newArray = [...prev.mobiles];\r\n                                    newArray[index] = e.target.value;\r\n                                    return {\r\n                                        ...prev,\r\n                                        mobiles: newArray\r\n                                    };\r\n                                })}\r\n                                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n                                required\r\n                            />\r\n                            {formData.mobiles.length > 1 && (\r\n                                <button type=\"button\" onClick={() => setFormData(prev => {\r\n                                    const newArray = [...prev.mobiles];\r\n                                    newArray.splice(index, 1);\r\n                                    return {\r\n                                        ...prev,\r\n                                        mobiles: newArray\r\n                                    };\r\n                                })} className=\"text-red-500\">\r\n                                    Remove\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                    <button type=\"button\" onClick={() => setFormData(prev => ({\r\n                        ...prev,\r\n                        mobiles: [...prev.mobiles, '']\r\n                    }))} className=\"mt-2 text-indigo-600\">\r\n                        Add Mobile\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Emails */}\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700\">Emails</label>\r\n                    {formData.emails.map((email, index) => (\r\n                        <div key={index} className=\"flex gap-2 mt-1\">\r\n                            <input\r\n                                type=\"email\"\r\n                                value={email}\r\n                                onChange={(e) => setFormData(prev => {\r\n                                    const newArray = [...prev.emails];\r\n                                    newArray[index] = e.target.value;\r\n                                    return {\r\n                                        ...prev,\r\n                                        emails: newArray\r\n                                    };\r\n                                })}\r\n                                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n                                required\r\n                            />\r\n                            {formData.emails.length > 1 && (\r\n                                <button type=\"button\" onClick={() => setFormData(prev => {\r\n                                    const newArray = [...prev.emails];\r\n                                    newArray.splice(index, 1);\r\n                                    return {\r\n                                        ...prev,\r\n                                        emails: newArray\r\n                                    };\r\n                                })} className=\"text-red-500\">\r\n                                    Remove\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                    <button type=\"button\" onClick={() => setFormData(prev => ({\r\n                        ...prev,\r\n                        emails: [...prev.emails, '']\r\n                    }))} className=\"mt-2 text-indigo-600\">\r\n                        Add Email\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Multiple image upload */}\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700\">Logo Images</label>\r\n                    <input\r\n                        type=\"file\"\r\n                        onChange={handleFileChange}\r\n                        accept=\"image/*\"\r\n                        multiple\r\n                        className=\"mt-1 block w-full\"\r\n                    />\r\n                    <div className=\"mt-2 grid grid-cols-3 gap-4\">\r\n                        {formData.previewUrls.map((url, index) => (\r\n                            <div key={index} className=\"space-y-2\">\r\n                                <img\r\n                                    src={url}\r\n                                    alt={formData.altName[index] || `Preview ${index + 1}`}\r\n                                    className=\"w-24 h-24 object-cover rounded\"\r\n                                />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Image Title\"\r\n                                    value={formData.imgTitle[index] || ''}\r\n                                    onChange={(e) => {\r\n                                        const newImgTitles = [...formData.imgTitle];\r\n                                        newImgTitles[index] = e.target.value;\r\n                                        setFormData(prev => ({\r\n                                            ...prev,\r\n                                            imgTitle: newImgTitles\r\n                                        }));\r\n                                    }}\r\n                                    className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\r\n                                />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Alt Text\"\r\n                                    value={formData.altName[index] || ''}\r\n                                    onChange={(e) => {\r\n                                        const newAltNames = [...formData.altName];\r\n                                        newAltNames[index] = e.target.value;\r\n                                        setFormData(prev => ({\r\n                                            ...prev,\r\n                                            altName: newAltNames\r\n                                        }));\r\n                                    }}\r\n                                    className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\r\n                                />\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => {\r\n                                        setFormData(prev => ({\r\n                                            ...prev,\r\n                                            previewUrls: prev.previewUrls.filter((_, i) => i !== index),\r\n                                            photo: Array.from(prev.photo).filter((_, i) => i !== index),\r\n                                            imgTitle: prev.imgTitle.filter((_, i) => i !== index),\r\n                                            altName: prev.altName.filter((_, i) => i !== index)\r\n                                        }));\r\n                                    }}\r\n                                    className=\"text-red-500\"\r\n                                >\r\n                                    Remove\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700\"\r\n                >\r\n                    {allUsers && allUsers.length > 0 ? 'Update' : 'Submit'}\r\n                </button>\r\n            </form>\r\n\r\n            {/* Display existing data */}\r\n            {/* {allUsers && allUsers.length > 0 && (\r\n                <div className=\"mt-8\">\r\n                    <h2 className=\"text-xl font-bold mb-4\">Current Contact Information</h2>\r\n                    <div className=\"border p-4 rounded-lg\">\r\n                        <p><strong>Address:</strong> {allUsers[0].address}</p>\r\n                        <p><strong>Mobiles:</strong> {allUsers[0].mobiles.join(', ')}</p>\r\n                        <p><strong>Emails:</strong> {allUsers[0].emails.join(', ')}</p>\r\n                        {allUsers[0].photo && allUsers[0].photo.length > 0 && (\r\n                            <div className=\"mt-2\">\r\n                                <p><strong>Logos:</strong></p>\r\n                                <div className=\"mt-1 grid grid-cols-3 gap-4\">\r\n                                    {allUsers[0].photo.map((photo, index) => (\r\n                                        <div key={index} className=\"space-y-1\">\r\n                                            <img\r\n                                                src={`/api/image/download/${photo}`}\r\n                                                alt={allUsers[0].altName[index] || ''}\r\n                                                className=\"w-24 h-24 object-cover rounded\"\r\n                                            />\r\n                                            <p className=\"text-sm\">{allUsers[0].imgTitle[index] || ''}</p>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactInfoForm;"],"names":["ContactInfoForm","formData","setFormData","useState","address","mobiles","emails","imgTitle","altName","photo","previewUrls","addUser","useAddUserMutation","updateUser","useUpdateUserMutation","data","allUsers","useGetAllUsersQuery","useEffect","length","existingData","map","p","forEach","url","startsWith","URL","revokeObjectURL","jsx","className","children","onSubmit","async","e","preventDefault","submitFormData","FormData","append","mobile","email","title","index","alt","file","photoUrl","id","_id","unwrap","error","jsxs","value","onChange","prev","target","required","type","newArray","onClick","splice","files","Array","from","newPreviewUrls","createObjectURL","accept","multiple","src","placeholder","newImgTitles","newAltNames","filter","_","i"],"mappings":"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"}