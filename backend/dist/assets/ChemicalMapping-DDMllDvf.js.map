{"version":3,"file":"ChemicalMapping-DDMllDvf.js","sources":["../../src/supplier/chemcalMapping_component/S_chemicalSearch.jsx","../../src/supplier/chemcalMapping_component/S_chemicalTable.jsx","../../src/supplier/chemcalMapping_component/SupplierSearch.jsx","../../src/supplier/ChemicalMapping.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Input } from '@/components/ui/input';\r\nimport axios from 'axios';\r\nimport { Button } from '@/components/ui/button';\r\nimport { useAddChemicalIdsToSupplierMutation } from '@/slice/supplierSlice/chemicalBySupplier';\r\n\r\nexport function S_ChemicalSearch({ selectedSupplier, onAddChemical }) {\r\n  const [chemicalSearch, setChemicalSearch] = useState('');\r\n  const [queryString, setQueryString] = useState('');\r\n  const [selectedChemical, setSelectedChemical] = useState(null);\r\n  const [chemicals, setChemicals] = useState([]);\r\n  const [isLoadingChemicals, setIsLoadingChemicals] = useState(false);\r\n\r\n  // Replace the RTK Query hook with a function to fetch chemicals\r\n  const fetchChemicals = async (alphabet) => {\r\n    if (!alphabet) return;\r\n    \r\n    setIsLoadingChemicals(true);\r\n    try {\r\n      const response = await axios.get(`/api/chemical/getChemicalByCategoryAndAlphabet?alphabet=${alphabet}`);\r\n      setChemicals(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching chemicals:', error);\r\n      setChemicals([]);\r\n    } finally {\r\n      setIsLoadingChemicals(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setChemicalSearch(value);\r\n    if (value.trim()) {\r\n      setQueryString(value);\r\n      fetchChemicals(value.charAt(0));\r\n    } else {\r\n      setQueryString('');\r\n      setChemicals([]);\r\n    }\r\n  };\r\n\r\n  // Mutation hook for adding chemical IDs to a supplier\r\n  const [addChemicalToSupplier, { isLoading: isAdding }] = useAddChemicalIdsToSupplierMutation();\r\n\r\n  const handleSelectChemical = (chemical) => {\r\n    setSelectedChemical(chemical);\r\n    setChemicalSearch(chemical.name);\r\n    setQueryString(''); // Clear the query string to hide the list\r\n  };\r\n\r\n  const handleAddChemical = async () => {\r\n    if (!selectedChemical || !selectedSupplier) {\r\n      console.error('No chemical or supplier selected');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const chemicalId = selectedChemical._id;\r\n      const supplierId = selectedSupplier._id;\r\n\r\n      await addChemicalToSupplier({\r\n        supplierId,\r\n        chemical_ids: [chemicalId],\r\n      }).unwrap();\r\n\r\n      // Clear selection\r\n      setSelectedChemical(null);\r\n      setChemicalSearch('');\r\n      \r\n      // Notify parent to refresh data\r\n      if (onAddChemical) {\r\n        onAddChemical();\r\n      }\r\n    } catch (error) {\r\n      alert(`Failed to add chemical: ${error.message || 'Unknown error occurred'}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <div className=\"relative\">\r\n        <Input\r\n          placeholder=\"Search Chemical\"\r\n          value={chemicalSearch}\r\n          onChange={handleInputChange}\r\n          className=\"w-full mb-4\"\r\n          disabled={!selectedSupplier}\r\n        />\r\n        {isLoadingChemicals && (\r\n          <div className=\"absolute top-2 right-4 text-sm text-gray-500\">Loading...</div>\r\n        )}\r\n      </div>\r\n\r\n      {queryString && chemicals?.length > 0 && (\r\n        <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n          {chemicals.map((chemical) => (\r\n            <li\r\n              key={chemical._id}\r\n              onClick={() => handleSelectChemical(chemical)}\r\n              className=\"p-2 hover:bg-gray-200 cursor-pointer border-b last:border-b-0\"\r\n            >\r\n              {chemical.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {chemicals?.length === 0 && !isLoadingChemicals && queryString && (\r\n        <div className=\"p-2 text-gray-500\">No chemicals found</div>\r\n      )}\r\n\r\n      <Button\r\n        onClick={handleAddChemical}\r\n        disabled={isAdding || !selectedChemical || !selectedSupplier}\r\n        className={`mt-4 w-fit py-2 bg-blue-500 text-white rounded hover:bg-blue-600 ${\r\n          isAdding ? 'opacity-50 cursor-not-allowed' : ''\r\n        }`}\r\n      >\r\n        {isAdding ? 'Adding...' : 'Add Chemical'}\r\n      </Button>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Table, Button, Modal, Pagination } from 'antd';\r\nimport { useDeleteChemicalFromSupplierMutation } from '@/slice/supplierSlice/SupplierSlice';\r\n\r\nexport function S_ChemicalTable({ chemicals, refetch, supplierId, onRemoveChemical }) {\r\n  const [page, setPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [deleteChemicalFromSupplier] = useDeleteChemicalFromSupplierMutation();\r\n  const [selectedChemical, setSelectedChemical] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const handleConfirmDelete = (chemical) => {\r\n    setSelectedChemical(chemical);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleRemoveChemical = async () => {\r\n    if (!supplierId || !selectedChemical) return;\r\n    try {\r\n      await deleteChemicalFromSupplier({\r\n        supplierId: supplierId,\r\n        chemicalId: selectedChemical._id,\r\n      });\r\n      onRemoveChemical(selectedChemical);\r\n      refetch();\r\n      setIsModalOpen(false);\r\n      setSelectedChemical(null);\r\n      if (currentChemicals.length === 1 && page > 1) {\r\n        setPage(1);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error removing chemical:', error);\r\n    }\r\n  };\r\n\r\n  const totalPages = Math.ceil(chemicals.length / itemsPerPage);\r\n  const startIndex = (page - 1) * itemsPerPage;\r\n  const endIndex = startIndex + itemsPerPage;\r\n  const currentChemicals = chemicals.slice(startIndex, endIndex);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'action',\r\n      render: (_, chemical) => (\r\n        <Button danger size=\"small\" onClick={() => handleConfirmDelete(chemical)}>\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n    { title: 'Chemical Name', dataIndex: 'name' },\r\n    { title: 'CAS Number', dataIndex: 'cas_number' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"border rounded-md mt-4 p-4\">\r\n      <Table\r\n        dataSource={currentChemicals}\r\n        columns={columns}\r\n        rowKey=\"_id\"\r\n        pagination={false}\r\n      />\r\n      <Pagination\r\n        current={page}\r\n        total={chemicals.length}\r\n        pageSize={itemsPerPage}\r\n        onChange={(page) => setPage(page)}\r\n        showSizeChanger\r\n        onShowSizeChange={(_, size) => setItemsPerPage(size)}\r\n        className=\"mt-4 float-end pt-5\"\r\n      />\r\n      <Modal\r\n        title=\"Confirm Deletion\"\r\n        open={isModalOpen}\r\n        onCancel={() => setIsModalOpen(false)}\r\n        onOk={handleRemoveChemical}\r\n        okText=\"Delete\"\r\n        okButtonProps={{ danger: true }}\r\n      >\r\n        <p>Are you sure you want to delete \"{selectedChemical?.name}\"?</p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Input } from '@/components/ui/input'\r\nimport { useGetSuppliersByAlphabetQuery, useGetSupplierByIdQuery } from '@/slice/supplierSlice/SupplierSlice'\r\nimport { S_ChemicalSearch } from './S_chemicalSearch'\r\nimport { S_ChemicalTable } from './S_chemicalTable'\r\n\r\nexport function SupplierSearch({ onSelectSupplier }) {\r\n  const [supplierSearch, setSupplierSearch] = useState('')\r\n  const [queryString, setQueryString] = useState('')\r\n  const [selectedSupplier, setSelectedSupplier] = useState(null)\r\n  \r\n  // Fetch suppliers based on the first letter of the query string\r\n  const { \r\n    data: suppliers, \r\n    isLoading: isLoadingSuppliers \r\n  } = useGetSuppliersByAlphabetQuery(\r\n    queryString.charAt(0),\r\n    { skip: queryString.length === 0 }\r\n  )\r\n  \r\n  // Fetch selected supplier data to get up-to-date chemical_ids\r\n  const { \r\n    data: refreshedSupplier, \r\n    refetch: refetchSupplier,\r\n    isFetching: isRefetchingSupplier\r\n  } = useGetSupplierByIdQuery(\r\n    selectedSupplier?._id, \r\n    { skip: !selectedSupplier }\r\n  )\r\n  \r\n  // Update selected supplier when fresh data is available\r\n  useEffect(() => {\r\n    if (refreshedSupplier && !isRefetchingSupplier) {\r\n      setSelectedSupplier(refreshedSupplier)\r\n      // Only call onSelectSupplier if it exists\r\n      if (typeof onSelectSupplier === 'function') {\r\n        onSelectSupplier(refreshedSupplier)\r\n      }\r\n    }\r\n  }, [refreshedSupplier, isRefetchingSupplier, onSelectSupplier])\r\n\r\n  const handleSelectSupplier = (supplier) => {\r\n    setSelectedSupplier(supplier)\r\n    setSupplierSearch(supplier.name)\r\n    setQueryString('')\r\n    // Only call onSelectSupplier if it exists\r\n    if (typeof onSelectSupplier === 'function') {\r\n      onSelectSupplier(supplier)\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value\r\n    setSupplierSearch(value)\r\n    setQueryString(value)\r\n  }\r\n\r\n  const handleChemicalModified = () => {\r\n    // Refetch the supplier to get updated chemical list\r\n    refetchSupplier()\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <Input\r\n        placeholder=\"Search Supplier\"\r\n        value={supplierSearch}\r\n        onChange={handleInputChange}\r\n        className=\"w-full mb-4\"\r\n      />\r\n\r\n      {isLoadingSuppliers ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        queryString &&\r\n        suppliers &&\r\n        suppliers.length > 0 && (\r\n          <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n            {suppliers.map((supplier) => (\r\n              <li\r\n                key={supplier.id}\r\n                onClick={() => handleSelectSupplier(supplier)}\r\n                className=\"p-2 hover:bg-gray-200 cursor-pointer\"\r\n              >\r\n                {supplier.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )\r\n      )}\r\n\r\n      {suppliers?.length === 0 && !isLoadingSuppliers && queryString && (\r\n        <div className=\"p-2 text-gray-500\">No Supplier found</div>\r\n      )}\r\n\r\n      {isRefetchingSupplier && (\r\n        <div className=\"p-2 text-gray-500\">Refreshing supplier data...</div>\r\n      )}\r\n\r\n      <S_ChemicalSearch\r\n        selectedSupplier={selectedSupplier}\r\n        onAddChemical={handleChemicalModified}\r\n      />\r\n\r\n      <div className=\"mt-4\">\r\n        <S_ChemicalTable\r\n          chemicals={selectedSupplier?.chemical_ids || []}\r\n          refetch={refetchSupplier}\r\n          onRemoveChemical={handleChemicalModified}\r\n          supplierId={selectedSupplier?._id}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","'use client'\r\n\r\nimport React from 'react'\r\nimport { SupplierSearch } from './chemcalMapping_component/SupplierSearch'\r\n\r\nexport default function AssignChemicals() {\r\n  const [selectedCustomer, setSelectedCustomer] = React.useState(null)\r\n  const [chemicals, setChemicals] = React.useState([])\r\n\r\n  const handleSelectCustomer = (customer) => {\r\n    setSelectedCustomer(customer)\r\n    setChemicals([])\r\n  }\r\n\r\n \r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-purple-700\">\r\n        Assign Chemicals to Supplier\r\n      </h1>\r\n\r\n      <div className=\"space-y-4\">\r\n        <SupplierSearch onSelectCustomer={handleSelectCustomer} />\r\n\r\n        \r\n        \r\n\r\n       \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["S_ChemicalSearch","selectedSupplier","onAddChemical","chemicalSearch","setChemicalSearch","useState","queryString","setQueryString","selectedChemical","setSelectedChemical","chemicals","setChemicals","isLoadingChemicals","setIsLoadingChemicals","addChemicalToSupplier","isLoading","isAdding","useAddChemicalIdsToSupplierMutation","jsxs","className","children","jsx","Input","placeholder","value","onChange","e","target","trim","async","alphabet","response","axios","get","data","error","fetchChemicals","charAt","disabled","length","map","chemical","onClick","name","handleSelectChemical","_id","Button","chemicalId","supplierId","chemical_ids","unwrap","alert","message","S_ChemicalTable","refetch","onRemoveChemical","page","setPage","itemsPerPage","setItemsPerPage","deleteChemicalFromSupplier","useDeleteChemicalFromSupplierMutation","isModalOpen","setIsModalOpen","Math","ceil","startIndex","endIndex","currentChemicals","slice","columns","title","dataIndex","render","_","danger","size","handleConfirmDelete","Table","dataSource","rowKey","pagination","Pagination","current","total","pageSize","showSizeChanger","onShowSizeChange","Modal","open","onCancel","onOk","okText","okButtonProps","SupplierSearch","onSelectSupplier","supplierSearch","setSupplierSearch","setSelectedSupplier","suppliers","isLoadingSuppliers","useGetSuppliersByAlphabetQuery","skip","refreshedSupplier","refetchSupplier","isFetching","isRefetchingSupplier","useGetSupplierByIdQuery","useEffect","handleChemicalModified","supplier","handleSelectSupplier","id","AssignChemicals","selectedCustomer","setSelectedCustomer","React","onSelectCustomer","customer"],"mappings":"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"}