{"version":3,"file":"ProductInquiry-BzSV9Cru.js","sources":["../../src/websiteBackend/productInquiry/ProductInquiry.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Trash2, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { useGetInquiriesQuery, useDeleteInquiryMutation } from '@/slice/inquiry/productInquiry';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport function ProductInquiryTable() {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  \r\n  const { data, isLoading, isError } = useGetInquiriesQuery();\r\n  const [deleteInquiry] = useDeleteInquiryMutation();\r\n  const inquiriesList = data?.inquiries || [];\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    });\r\n\r\n    if (result.isConfirmed) {\r\n      try {\r\n        await deleteInquiry(id).unwrap();\r\n        Swal.fire(\r\n          'Deleted!',\r\n          'The inquiry has been deleted.',\r\n          'success'\r\n        );\r\n      } catch (error) {\r\n        console.error('Failed to delete inquiry:', error);\r\n        Swal.fire(\r\n          'Error!',\r\n          'Failed to delete the inquiry.',\r\n          'error'\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleItemsPerPageChange = (value) => {\r\n    setItemsPerPage(Number(value));\r\n    setCurrentPage(1); // Reset to first page when changing items per page\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  // Calculate pagination\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = inquiriesList.slice(indexOfFirstItem, indexOfLastItem);\r\n  const totalPages = Math.ceil(inquiriesList.length / itemsPerPage);\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div>Error loading inquiries</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h1 className=\"text-2xl font-bold mb-5\">Contact List</h1>\r\n      <div className=\"flex justify-between px-5 bg-gray-100 p-2 rounded-md items-center\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <span>Show</span>\r\n          <Select onValueChange={handleItemsPerPageChange} defaultValue=\"10\">\r\n            <SelectTrigger className=\"w-[70px]\">\r\n              <SelectValue placeholder=\"10\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {[10, 20, 30, 40, 50].map((value) => (\r\n                <SelectItem key={value} value={value.toString()}>\r\n                  {value}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          <span>entries</span>\r\n        </div>\r\n        <div>\r\n          Showing {indexOfFirstItem + 1} to {Math.min(indexOfLastItem, inquiriesList.length)} of {inquiriesList.length} entries\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"rounded-md border\">\r\n        <Table>\r\n          <TableHeader className=\"bg-gray-100\">\r\n            <TableRow>\r\n              <TableHead className=\"text-md font-medium  \">Name</TableHead>\r\n              <TableHead className=\"text-md font-medium\">Email</TableHead>\r\n              <TableHead className=\"text-md font-medium\">Phone</TableHead>\r\n              <TableHead className=\"text-md font-medium\">Subject</TableHead>\r\n              <TableHead className=\"text-md font-medium\">Message</TableHead>\r\n              <TableHead className=\"text-md font-medium\">Product Name</TableHead>\r\n              <TableHead className=\"text-md font-medium text-right\">Action</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {currentItems.map((inquiry) => (\r\n              <TableRow key={inquiry._id}>\r\n                <TableCell>{inquiry.name}</TableCell>\r\n                <TableCell>{inquiry.email}</TableCell>\r\n                <TableCell>{inquiry.phone}</TableCell>\r\n                <TableCell>{inquiry.subject}</TableCell>\r\n                <TableCell className=\"max-w-xs truncate\">{inquiry.message}</TableCell>\r\n                <TableCell>{inquiry.productName}</TableCell>\r\n                <TableCell className=\"text-center\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"icon\"\r\n                    onClick={() => handleDelete(inquiry._id)}\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4 text-red-500 font-bold\" />\r\n                    <span className=\"sr-only\">Delete</span>\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          Showing page {currentPage} of {totalPages}\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => handlePageChange(currentPage - 1)}\r\n            disabled={currentPage === 1}\r\n          >\r\n            <ChevronLeft className=\"h-4 w-4\" />\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => handlePageChange(currentPage + 1)}\r\n            disabled={currentPage === totalPages}\r\n          >\r\n            Next\r\n            <ChevronRight className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["ProductInquiryTable","currentPage","setCurrentPage","useState","itemsPerPage","setItemsPerPage","data","isLoading","isError","useGetInquiriesQuery","deleteInquiry","useDeleteInquiryMutation","inquiriesList","inquiries","handlePageChange","page","indexOfLastItem","indexOfFirstItem","currentItems","slice","totalPages","Math","ceil","length","jsx","children","jsxs","className","Select","onValueChange","value","Number","defaultValue","SelectTrigger","SelectValue","placeholder","SelectContent","map","SelectItem","toString","min","Table","TableHeader","TableRow","TableHead","TableBody","inquiry","TableCell","name","email","phone","subject","message","productName","Button","variant","size","onClick","async","id","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","unwrap","error","handleDelete","_id","Trash2","disabled","ChevronLeft","ChevronRight"],"mappings":"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"}