{"version":3,"file":"checkbox-B8rDcY9L.js","sources":["../../node_modules/@radix-ui/react-checkbox/dist/index.mjs","../../src/components/ui/checkbox.jsx"],"sourcesContent":["\"use client\";\n\n// packages/react/checkbox/src/checkbox.tsx\nimport * as React from \"react\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CHECKBOX_NAME = \"Checkbox\";\nvar [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\nvar [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);\nvar Checkbox = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = \"on\",\n      onCheckedChange,\n      form,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    const isFormControl = button ? form || !!button.closest(\"form\") : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange\n    });\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form2 = button?.form;\n      if (form2) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form2.addEventListener(\"reset\", reset);\n        return () => form2.removeEventListener(\"reset\", reset);\n      }\n    }, [button, setChecked]);\n    return /* @__PURE__ */ jsxs(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: [\n      /* @__PURE__ */ jsx(\n        Primitive.button,\n        {\n          type: \"button\",\n          role: \"checkbox\",\n          \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked,\n          \"aria-required\": required,\n          \"data-state\": getState(checked),\n          \"data-disabled\": disabled ? \"\" : void 0,\n          disabled,\n          value,\n          ...checkboxProps,\n          ref: composedRefs,\n          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === \"Enter\") event.preventDefault();\n          }),\n          onClick: composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })\n        }\n      ),\n      isFormControl && /* @__PURE__ */ jsx(\n        BubbleInput,\n        {\n          control: button,\n          bubbles: !hasConsumerStoppedPropagationRef.current,\n          name,\n          value,\n          checked,\n          required,\n          disabled,\n          form,\n          style: { transform: \"translateX(-100%)\" },\n          defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked\n        }\n      )\n    ] });\n  }\n);\nCheckbox.displayName = CHECKBOX_NAME;\nvar INDICATOR_NAME = \"CheckboxIndicator\";\nvar CheckboxIndicator = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return /* @__PURE__ */ jsx(Presence, { present: forceMount || isIndeterminate(context.state) || context.state === true, children: /* @__PURE__ */ jsx(\n      Primitive.span,\n      {\n        \"data-state\": getState(context.state),\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        ...indicatorProps,\n        ref: forwardedRef,\n        style: { pointerEvents: \"none\", ...props.style }\n      }\n    ) });\n  }\n);\nCheckboxIndicator.displayName = INDICATOR_NAME;\nvar BubbleInput = (props) => {\n  const { control, checked, bubbles = true, defaultChecked, ...inputProps } = props;\n  const ref = React.useRef(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n  return /* @__PURE__ */ jsx(\n    \"input\",\n    {\n      type: \"checkbox\",\n      \"aria-hidden\": true,\n      defaultChecked: defaultChecked ?? defaultCheckedRef.current,\n      ...inputProps,\n      tabIndex: -1,\n      ref,\n      style: {\n        ...props.style,\n        ...controlSize,\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        opacity: 0,\n        margin: 0\n      }\n    }\n  );\n};\nfunction isIndeterminate(checked) {\n  return checked === \"indeterminate\";\n}\nfunction getState(checked) {\n  return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Checkbox;\nvar Indicator = CheckboxIndicator;\nexport {\n  Checkbox,\n  CheckboxIndicator,\n  Indicator,\n  Root,\n  createCheckboxScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from \"react\"\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\r\nimport { Check } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\r\n  <CheckboxPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white data-[state=checked]:border-none bg-white\", // Added border-none for checked state\r\n      className\r\n    )}\r\n    {...props}>\r\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\r\n      <Check className=\"h-4 w-4\" />\r\n    </CheckboxPrimitive.Indicator>\r\n  </CheckboxPrimitive.Root>\r\n))\r\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\r\n\r\nexport { Checkbox }\r\n"],"names":["CHECKBOX_NAME","createCheckboxContext","createCheckboxScope","createContextScope","CheckboxProvider","useCheckboxContext","Checkbox","React.forwardRef","forwardRef","props","forwardedRef","__scopeCheckbox","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","form","checkboxProps","button","setButton","React.useState","composedRefs","useComposedRefs","node","hasConsumerStoppedPropagationRef","React.useRef","useRef","isFormControl","closest","setChecked","useControllableState","prop","defaultProp","onChange","initialCheckedStateRef","React.useEffect","form2","reset","current","addEventListener","removeEventListener","jsxs","scope","state","children","jsx","Primitive","type","role","isIndeterminate","getState","ref","onKeyDown","composeEventHandlers","event","key","preventDefault","onClick","prevChecked","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","CheckboxIndicator","forceMount","indicatorProps","context","Presence","present","span","pointerEvents","inputProps","usePrevious","controlSize","useSize","input","inputProto","window","HTMLInputElement","prototype","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","defaultCheckedRef","tabIndex","position","opacity","margin","Root","Indicator","className","CheckboxPrimitive.Root","cn","CheckboxPrimitive.Indicator","Check"],"mappings":"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","x_google_ignoreList":[0]}