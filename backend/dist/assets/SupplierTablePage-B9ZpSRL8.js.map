{"version":3,"file":"SupplierTablePage-B9ZpSRL8.js","sources":["../../src/supplier/supplierTable/AddChemicalModel.jsx","../../src/supplier/ChemicalTable.jsx","../../src/supplier/supplierTable/SupplierTable.jsx","../../src/supplier/supplierTable/PurchaseOrder.jsx","../../src/supplier/SupplierTablePage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Dialog, DialogContent, DialogTitle, DialogHeader } from \"@/components/ui/dialog\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useAddChemicalIdsToSupplierMutation, useGetChemicalsByAlphabetQuery } from \"@/slice/supplierSlice/chemicalBySupplier\"; // Adjust the import path\r\n\r\nconst AddChemicalModal = ({ open, onClose, chemicalName, supplier, supplierId, refetch ,allData }) => {\r\n \r\n  const [supplierSearch, setSupplierSearch] = useState(\"\");\r\n  const [selectedChemicals, setSelectedChemicals] = useState([]); // Store selected chemicals\r\n\r\n  // Fetch chemicals based on the search query\r\n  const { data: chemicals, isLoading, error } = useGetChemicalsByAlphabetQuery(\r\n    supplierSearch,\r\n    { skip: !supplierSearch || supplierSearch.length < 2 }\r\n  );\r\n\r\n  // Mutation hook to add chemical IDs to supplier\r\n  const [addChemicalIdsToSupplier, { isLoading: isAdding }] = useAddChemicalIdsToSupplierMutation();\r\n\r\n  const handleAddSupplier = async () => {\r\n    const chemicalIds = selectedChemicals.map((chemical) => chemical._id);\r\n\r\n    try {\r\n      // Pass the supplierId and the list of selected chemical IDs to the mutation\r\n      await addChemicalIdsToSupplier({ supplierId, chemical_ids: chemicalIds }).unwrap();\r\n      await refetch(); // Refetch the suppliers data\r\n      onClose(); // Close the modal\r\n      allData()\r\n    } catch (err) {\r\n      console.error(\"Error adding chemicals:\", err);\r\n    }\r\n  };\r\n\r\n  const handleSelectChemical = (chemical) => {\r\n    // Add the selected chemical to the list and update the state immediately\r\n    setSelectedChemicals((prevSelected) => {\r\n      const updatedSelected = [...prevSelected, chemical];\r\n      setSupplierSearch(\"\"); // Clear the search input after selection\r\n      return updatedSelected;\r\n    });\r\n  };\r\n\r\n  const handleRemoveChemical = (chemicalId) => {\r\n    // Remove the selected chemical from the list\r\n    setSelectedChemicals((prevSelected) =>\r\n      prevSelected.filter((chemical) => chemical._id !== chemicalId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={(isOpen) => !isOpen && onClose()}>\r\n      <DialogContent className=\"max-w-lg p-6\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"text-lg font-semibold text-[#3b1f91]\">\r\n            Add Chemicals for {supplier}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n        <div className=\"mt-4\">\r\n          <Input\r\n            placeholder={`Search ${supplier}`}\r\n            value={supplierSearch}\r\n            onChange={(e) => setSupplierSearch(e.target.value)}\r\n            className=\"w-full mb-4\"\r\n          />\r\n\r\n          {/* Dynamic Dropdown for Chemical Suggestions */}\r\n          {isLoading ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            supplierSearch &&\r\n            chemicals &&\r\n            chemicals.length > 0 && (\r\n              <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n                {chemicals.map((chemical) => (\r\n                  <li\r\n                    key={chemical._id}\r\n                    onClick={() => handleSelectChemical(chemical)}\r\n                    className=\"p-2 hover:bg-gray-200 cursor-pointer\"\r\n                  >\r\n                    {chemical.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )\r\n          )}\r\n\r\n          {chemicals?.length === 0 && !isLoading && supplierSearch && (\r\n            <div className=\"p-2 text-gray-500\">No chemicals found</div>\r\n          )}\r\n\r\n          {/* Show selected chemicals in input fields */}\r\n          <div className=\"mt-4\">\r\n            {selectedChemicals.length > 0 && (\r\n              <div className=\"space-y-2\">\r\n                {selectedChemicals.map((chemical) => (\r\n                  <div\r\n                    key={chemical._id}\r\n                    className=\"flex justify-between items-center bg-gray-100 p-2 rounded\"\r\n                  >\r\n                    <span>{chemical.name}</span>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleRemoveChemical(chemical._id)}\r\n                      className=\"text-red-500\"\r\n                    >\r\n                      Remove\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex justify-between mt-4\">\r\n            <Button\r\n              onClick={handleAddSupplier}\r\n              className=\"bg-[#3b1f91] hover:bg-purple-700\"\r\n              disabled={isAdding || selectedChemicals.length === 0}\r\n            >\r\n              {isAdding ? \"Adding...\" : \"+ Add\"}\r\n            </Button>\r\n            <Button onClick={onClose} className=\"bg-red-600 hover:bg-red-700\">\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddChemicalModal;\r\n","import { useState, useEffect } from 'react';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Trash2 } from 'lucide-react';\r\nimport { useCountAllChemicalsQuery } from \"@/slice/supplierSlice/chemicalBySupplier\";\r\nimport { DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport AddChemicalModal from './supplierTable/AddChemicalModel';\r\nimport { useDeleteChemicalFromSupplierMutation } from \"@/slice/supplierSlice/SupplierSlice\"; // Import mutation\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\nexport default function ChemicalTable({ supplier, supplierName ,allData  }) {\r\n  // State for pagination\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [showAddChemicalModal, setShowAddChemicalModal] = useState(false);\r\n  const [selectedChemical, setSelectedChemical] = useState(null); // Track the selected chemical\r\n  const [modalType, setModalType] = useState(null); // New state to track modal type\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [chemicalToDelete, setChemicalToDelete] = useState(null);\r\n\r\n  // Fetch chemicals using the supplierId\r\n  const { data, isLoading, isError ,refetch } = useCountAllChemicalsQuery(supplier, {\r\n    skip: (currentPage - 1) * itemsPerPage,\r\n    limit: itemsPerPage,\r\n  });\r\n\r\n  // Mutation hook for deleting a chemical\r\n  const [deleteChemicalFromSupplier, { isLoading: isDeleting }] = useDeleteChemicalFromSupplierMutation();\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      // Calculate the total pages based on the length of the chemicals array\r\n      setTotalPages(Math.ceil(data.chemicals.length / itemsPerPage));\r\n    }\r\n  }, [data, itemsPerPage]);\r\n\r\n  const handleAddChemicalClick = (chemical) => {\r\n    setSelectedChemical(chemical);  // Set the selected chemical\r\n    setShowAddChemicalModal(true);  // Open the modal\r\n    setModalType('supplier');       // Set modal type to 'supplier'\r\n  };\r\n\r\n  const handlePreviousPage = () => {\r\n    if (currentPage > 1) setCurrentPage(currentPage - 1);\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    if (currentPage < totalPages) setCurrentPage(currentPage + 1);\r\n  };\r\n\r\n  const handleDeleteClick = (chemical) => {\r\n    setChemicalToDelete(chemical);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    try {\r\n      await deleteChemicalFromSupplier({ \r\n        supplierId: supplier, \r\n        chemicalId: chemicalToDelete._id \r\n      }).unwrap();\r\n      refetch();\r\n    } catch (err) {\r\n      console.error(\"Error deleting chemical:\", err);\r\n    } finally {\r\n      setShowDeleteConfirmation(false);\r\n      setChemicalToDelete(null);\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n  if (isError) return <div>Error loading chemicals</div>;\r\n\r\n  // Ensure the chemicals are mapped from the correct data source\r\n  const chemicals = Array.isArray(data?.chemicals) ? data.chemicals : [];\r\n\r\n  return (\r\n    <div className=\"w-full overflow-auto\">\r\n      <DialogHeader>\r\n        <div className=\"flex justify-between items-center mr-5\">\r\n          <DialogTitle>\r\n            Chemicals for {supplierName}\r\n          </DialogTitle>\r\n          <Button onClick={() => handleAddChemicalClick(chemicals)} className=\"bg-purple-600 hover:bg-purple-700\">\r\n            + Add Chemical\r\n          </Button>\r\n        </div>\r\n      </DialogHeader>\r\n\r\n      <div className=\"mt-5 \">\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead className=\"p-2\">Name</TableHead>\r\n              <TableHead className=\"p-2\">CAS Number</TableHead>\r\n              <TableHead className=\"p-2 w-[100px]\">Action</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {chemicals.map((chemical, index) => (\r\n              <TableRow key={index} className=\"p-2\">\r\n                <TableCell className=\"px-2 py-1\">{chemical.name}</TableCell>\r\n                <TableCell className=\"px-2 py-1\">{chemical.cas_number}</TableCell>\r\n                <TableCell className=\"px-2 py-1\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"icon\"\r\n                    className=\"text-red-500\"\r\n                    onClick={() => handleDeleteClick(chemical)}\r\n                    disabled={isDeleting}\r\n                  >\r\n                    {isDeleting ? \"Deleting...\" : <Trash2 className=\"h-4 w-4\" />}\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Render the Add Supplier Modal if open */}\r\n      {showAddChemicalModal && selectedChemical && (\r\n        <AddChemicalModal\r\n          open={showAddChemicalModal}\r\n          onClose={() => setShowAddChemicalModal(false)}\r\n          chemicalName={selectedChemical.name}\r\n          supplier={supplierName}\r\n          supplierId={supplier}\r\n          refetch={refetch}\r\n          allData={allData}\r\n        />\r\n      )}\r\n\r\n      <AlertDialog open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              This action cannot be undone. This will permanently delete the chemical\r\n              {chemicalToDelete && ` \"${chemicalToDelete.name}\"`} from this supplier.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={handleConfirmDelete}\r\n              className=\"bg-red-500 hover:bg-red-600\"\r\n            >\r\n              Delete\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n\r\n      <div className=\"flex items-center justify-between mt-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className=\"text-sm\">Items per page:</span>\r\n          <select\r\n            className=\"border p-1 rounded\"\r\n            value={itemsPerPage}\r\n            onChange={(e) => setItemsPerPage(Number(e.target.value))}\r\n          >\r\n            <option value={5}>5</option>\r\n            <option value={10}>10</option>\r\n            <option value={20}>20</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handlePreviousPage}\r\n            disabled={currentPage === 1}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <span>{currentPage} of {totalPages}</span>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handleNextPage}\r\n            disabled={currentPage === totalPages}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ChevronRight, EllipsisVertical } from 'lucide-react';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { useNavigate } from 'react-router-dom'; // For redirection\r\nimport AddChemicalModal from './AddChemicalModel';\r\nimport { useDeleteSupplierMutation, useGetSuppliersQuery } from '@/slice/supplierSlice/SupplierSlice';\r\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\r\nimport ChemicalTable from '../ChemicalTable';\r\n\r\nconst SuppliersTable = () => {\r\n    const { data: suppliers = [], isLoading, error } = useGetSuppliersQuery();\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [itemsPerPage, setItemsPerPage] = useState(10); // Default items per page\r\n    const [showAddChemicalModal, setShowAddChemicalModal] = useState(false);\r\n    const [currentSupplier, setCurrentSupplier] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        name: '',\r\n        email: '',\r\n        mobile: '',\r\n        country: '',\r\n        website: ''\r\n    });\r\n    const navigate = useNavigate();\r\n    const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n    const [showChemicalTable, setShowChemicalTable] = useState(false);\r\n    const { refetch } = useGetSuppliersQuery();\r\n\r\n    const [deleteSupplier] = useDeleteSupplierMutation();\r\n\r\n    const handleFilterChange = (field, value) => {\r\n        setFilters(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n        setCurrentPage(1); // Reset to first page when filter changes\r\n    };\r\n\r\n    // Filtered and Paginated Data\r\n    const filteredData = suppliers.filter(supplier => {\r\n        const searchTerm = filters.name.toLowerCase();\r\n        return (\r\n            (!filters.name || \r\n                supplier.name.toLowerCase().includes(searchTerm) ||\r\n                supplier.email.toLowerCase().includes(searchTerm) ||\r\n                supplier.mobile.toLowerCase().includes(searchTerm)\r\n            ) &&\r\n            (!filters.country || supplier.country.toLowerCase().includes(filters.country.toLowerCase())) &&\r\n            (!filters.website || supplier.website.toLowerCase().includes(filters.website.toLowerCase()))\r\n        );\r\n    });\r\n\r\n    const totalPages = Math.ceil(filteredData.length / itemsPerPage);\r\n    const paginatedData = filteredData.slice(\r\n        (currentPage - 1) * itemsPerPage,\r\n        currentPage * itemsPerPage\r\n    );\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await deleteSupplier(id);\r\n        } catch (error) {\r\n            console.error('Error deleting supplier:', error);\r\n        }\r\n    };\r\n\r\n    const handleItemsPerPageChange = (e) => {\r\n        setItemsPerPage(parseInt(e.target.value));\r\n        setCurrentPage(1); // Reset to the first page\r\n    };\r\n\r\n    const handleAddChemical = (supplier) => {\r\n        setCurrentSupplier(supplier);\r\n        setShowAddChemicalModal(true);\r\n    };\r\n\r\n    const handleChemicalsClick = (supplier) => {\r\n        setSelectedSupplier(supplier);\r\n        setShowChemicalTable(true);\r\n    };\r\n\r\n    // Add loading state handling\r\n    if (isLoading) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    // Add error state handling\r\n    if (error) {\r\n        return <div>Error loading suppliers: {error.message}</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"rounded-md shadow-sm bg-white\">\r\n                <Table className=\"w-full text-left border-collapse\">\r\n                    <TableHeader className=\"bg-gray-100 border-b border-gray-300\">\r\n                        <TableRow className=\"text-gray-600 font-semibold\">\r\n                            <TableHead className=\"w-10\"></TableHead>\r\n                            <TableHead>Info</TableHead>\r\n                            <TableHead>Chemicals</TableHead>\r\n                            <TableHead>Country</TableHead>\r\n                            <TableHead>Website</TableHead>\r\n                        </TableRow>\r\n                        <TableRow className=\"bg-gray-50\">\r\n                            <TableCell></TableCell>\r\n                            <TableCell>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Filter by name, email or mobile\"\r\n                                    className=\"p-2 rounded w-full border border-gray-300\"\r\n                                    value={filters.name}\r\n                                    onChange={(e) => handleFilterChange('name', e.target.value)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Filter by country\"\r\n                                    className=\"p-2 rounded w-full border border-gray-300\"\r\n                                    value={filters.country}\r\n                                    onChange={(e) => handleFilterChange('country', e.target.value)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Filter by website\"\r\n                                    className=\"p-2 rounded w-full border border-gray-300\"\r\n                                    value={filters.website}\r\n                                    onChange={(e) => handleFilterChange('website', e.target.value)}\r\n                                />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHeader>\r\n\r\n                    <TableBody>\r\n                        {paginatedData.map((supplier) => (\r\n                            <React.Fragment key={supplier._id}>\r\n                                <TableRow className=\"hover:bg-gray-50 border-b border-gray-300\">\r\n                                    <TableCell className=\"p-2\">\r\n                                        <DropdownMenu>\r\n                                            <DropdownMenuTrigger asChild>\r\n                                                <button className='p-3'>\r\n                                                    <EllipsisVertical className=\"w-4 h-4\" />\r\n                                                </button>\r\n                                            </DropdownMenuTrigger>\r\n                                            <DropdownMenuContent align=\"end\">\r\n                                                <DropdownMenuItem onClick={() => handleAddChemical(supplier)}>\r\n                                                    Add Chemical\r\n                                                </DropdownMenuItem>\r\n                                                <DropdownMenuItem onClick={() => navigate(`/edit-supplier-form/${supplier._id}`)}>\r\n                                                    Edit\r\n                                                </DropdownMenuItem>\r\n                                                <DropdownMenuItem onClick={() => handleDelete(supplier._id)}>\r\n                                                    Delete\r\n                                                </DropdownMenuItem>\r\n                                            </DropdownMenuContent>\r\n                                        </DropdownMenu>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <div className=\"flex flex-col\">\r\n                                            <span className=\"font-medium\">{supplier.name}</span>\r\n                                            <span className=\"text-sm text-gray-600\">{supplier.email}</span>\r\n                                            <span className=\"text-sm text-gray-600\">{supplier.mobile}</span>\r\n                                        </div>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Button\r\n                                            variant=\"default\"\r\n                                            size=\"sm\"\r\n                                            onClick={() => handleChemicalsClick(supplier)}\r\n                                            className=\"bg-[#3b1f91] text-white px-4 py-2 rounded hover:bg-[#3b1f91] transition-colors duration-300\"\r\n                                        >\r\n                                            Chemicals\r\n                                            <Badge\r\n                                                variant=\"secondary\"\r\n                                                className=\"ml-2 bg-gray-200 text-black px-2 py-1 rounded\"\r\n                                            >\r\n                                                {supplier.totalChemicalIds || 0}\r\n                                            </Badge>\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    <TableCell>{supplier.country}</TableCell>\r\n                                    <TableCell>\r\n                                        <Link\r\n                                            to={supplier.website}\r\n                                            target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\"\r\n                                            className=\"text-blue-600 hover:underline\"\r\n                                        >\r\n                                            {supplier.website}\r\n                                        </Link>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n\r\n            {/* Pagination Controls */}\r\n            <div className=\"flex justify-between items-center mt-4\">\r\n                <div>\r\n                    <label htmlFor=\"items-per-page\" className=\"mr-2\">\r\n                        Items per page:\r\n                    </label>\r\n                    <select\r\n                        id=\"items-per-page\"\r\n                        className=\"p-2  border border-gray-300 rounded\"\r\n                        value={itemsPerPage}\r\n                        onChange={handleItemsPerPageChange}\r\n                    >\r\n                        <option value={10}>10</option>\r\n                        <option value={20}>20</option>\r\n                        <option value={30}>30</option>\r\n                        <option value={40}>40</option>\r\n                        <option value={50}>50</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n                        className=\"px-3 py-1 border border-gray-300 rounded mr-2\"\r\n                        disabled={currentPage === 1}\r\n                    >\r\n                        Previous\r\n                    </button>\r\n                    <span>\r\n                        Page {currentPage} of {totalPages}\r\n                    </span>\r\n                    <button\r\n                        onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\r\n                        className=\"px-3 py-1 border border-gray-300 rounded ml-2\"\r\n                        disabled={currentPage === totalPages}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {showAddChemicalModal && (\r\n                <AddChemicalModal\r\n                    open={showAddChemicalModal}\r\n                    onClose={() => setShowAddChemicalModal(false)}\r\n                    supplier={currentSupplier}\r\n                    supplierId={currentSupplier?._id}\r\n                    chemicalName={currentSupplier?.name}\r\n                />\r\n            )}\r\n\r\n            <Dialog open={showChemicalTable} onOpenChange={setShowChemicalTable}>\r\n                <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\r\n                    {showChemicalTable && selectedSupplier && (\r\n                        <ChemicalTable \r\n                            supplier={selectedSupplier._id}\r\n                            supplierName={selectedSupplier.name}\r\n                            allData={refetch}\r\n                        />\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SuppliersTable;\r\n","// PurchaseOrdersTable.js\r\n\r\nimport React from 'react';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\n\r\nconst PurchaseOrdersTable = ({ purchaseOrders }) => (\r\n  <Table>\r\n    <TableHeader>\r\n      <TableRow>\r\n        <TableHead>Created Date</TableHead>\r\n        <TableHead>Order Number</TableHead>\r\n        <TableHead>Payment Status</TableHead>\r\n        <TableHead>Total Tax</TableHead>\r\n        <TableHead>Total Discount</TableHead>\r\n        <TableHead>Total Amount</TableHead>\r\n      </TableRow>\r\n    </TableHeader>\r\n    <TableBody>\r\n      {purchaseOrders.map((order, index) => (\r\n        <TableRow key={index}>\r\n          <TableCell>{order.createdDate}</TableCell>\r\n          <TableCell>{order.orderNumber}</TableCell>\r\n          <TableCell>{order.paymentStatus}</TableCell>\r\n          <TableCell>${order.totalTax}</TableCell>\r\n          <TableCell>${order.totalDiscount}</TableCell>\r\n          <TableCell>${order.totalAmount}</TableCell>\r\n        </TableRow>\r\n      ))}\r\n    </TableBody>\r\n  </Table>\r\n);\r\n\r\nexport default PurchaseOrdersTable;\r\n","// SuppliersDashboard.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Plus } from 'lucide-react';\r\n// import SuppliersTable from './SuppliersTable';  // Import SuppliersTable here\r\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\r\nimport ChemicalTable from './ChemicalTable';\r\n// import PurchaseOrderTable from './PurchaseOrderTable';  // Import PurchaseOrderTable\r\n// import { useGetSuppliersQuery } from '@/services/suppliers';  // Assuming you have a query hook for fetching suppliers\r\nimport SuppliersTable from './supplierTable/SupplierTable';\r\nimport PurchaseOrdersTable from './supplierTable/PurchaseOrder';\r\nimport { useGetSuppliersQuery } from '@/slice/supplierSlice/SupplierSlice';\r\nimport { BreadcrumbWithCustomSeparator } from '@/breadCrumb/BreadCrumb';\r\nimport { Link } from 'react-router-dom';\r\nconst breadcrumbItems = [\r\n  { label: \"Dashboard\", href: \"/dashboard\" },\r\n  { label: \"Supplier Table\", href: null },\r\n]\r\nexport default function SuppliersDashboard() {\r\n  const [showPurchaseOrders, setShowPurchaseOrders] = useState({});\r\n  const [showChemicalsModal, setShowChemicalsModal] = useState(false);\r\n  const [selectedSupplier, setSelectedSupplier] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(5);\r\n  const { data: suppliers = [], isLoading, error ,refetch } = useGetSuppliersQuery();  // Fetch suppliers from the API\r\n  const [filters, setFilters] = useState({});\r\n\r\n  if (isLoading) return <p>Loading suppliers...</p>;\r\n  if (error) return <p>Failed to load suppliers</p>;\r\n\r\n  const handleFilterChange = (field, value) => {\r\n    setFilters(prevFilters => ({\r\n        ...prevFilters,\r\n        [field]: value,\r\n    }));\r\n};\r\n\r\n  const handleChemicalClick = (supplier) => {\r\n    console.log('Opening chemical modal for supplier:', supplier);\r\n    setSelectedSupplier(supplier);\r\n    setShowChemicalsModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"\">\r\n       <BreadcrumbWithCustomSeparator items={breadcrumbItems} />\r\n          \r\n      <div className=\"flex justify-between mt-4 items-center mb-6\">\r\n        <h1 className=\"text-2xl font-medium text-[#3b1f91] \">Suppliers</h1>\r\n        <Link to=\"/supplier-form\">\r\n        <Button>\r\n          <Plus className=\"w-4 h-4 mr-2\" />\r\n          Add Supplier\r\n        </Button>\r\n        </Link>\r\n       \r\n      </div>\r\n\r\n      {/* Pass selectedSupplier and other props to SuppliersTable */}\r\n      <SuppliersTable \r\n        suppliers={suppliers} \r\n        showPurchaseOrders={showPurchaseOrders} \r\n        setShowPurchaseOrders={setShowPurchaseOrders} \r\n        setSelectedSupplier={setSelectedSupplier} \r\n        setShowChemicalsModal={setShowChemicalsModal} \r\n        filters={filters} \r\n        handleFilterChange={handleFilterChange}\r\n        currentPage={currentPage}\r\n        itemsPerPage={itemsPerPage}\r\n        paginatedData={suppliers.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)}  // Paginated suppliers data\r\n        selectedSupplier={selectedSupplier} // Pass selectedSupplier here\r\n        refetch = {refetch}\r\n        onChemicalClick={handleChemicalClick}\r\n     />\r\n\r\n      {/* Display Purchase Order Table when showPurchaseOrders is true */}\r\n      {showPurchaseOrders[selectedSupplier?.id] && selectedSupplier && (\r\n        <div className=\"mt-6\">\r\n          <h2 className=\"text-xl font-bold mb-4\">Purchase Orders for {selectedSupplier.name}</h2>\r\n          <PurchaseOrdersTable purchaseOrders={[]} />  {/* Replace with actual purchase order data */}\r\n        </div>\r\n      )}\r\n\r\n      {/* Chemical modal */}\r\n      <Dialog \r\n        open={showChemicalsModal} \r\n        onOpenChange={(open) => {\r\n          console.log('Modal state changing to:', open);\r\n          setShowChemicalsModal(open);\r\n        }}\r\n      >\r\n        <DialogContent className=\"max-w-2xl h-1/2\">\r\n          <ChemicalTable supplier={selectedSupplier?._id} supplierName={selectedSupplier?.name} allData = {refetch} />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["AddChemicalModal","open","onClose","chemicalName","supplier","supplierId","refetch","allData","supplierSearch","setSupplierSearch","useState","selectedChemicals","setSelectedChemicals","data","chemicals","isLoading","error","useGetChemicalsByAlphabetQuery","skip","length","addChemicalIdsToSupplier","isAdding","useAddChemicalIdsToSupplierMutation","jsx","Dialog","onOpenChange","isOpen","children","jsxs","DialogContent","className","DialogHeader","DialogTitle","Input","placeholder","value","onChange","e","target","map","chemical","onClick","prevSelected","updatedSelected","handleSelectChemical","name","_id","Button","variant","size","handleRemoveChemical","chemicalId","filter","async","chemicalIds","chemical_ids","unwrap","err","disabled","ChemicalTable","supplierName","itemsPerPage","setItemsPerPage","currentPage","setCurrentPage","totalPages","setTotalPages","showAddChemicalModal","setShowAddChemicalModal","selectedChemical","setSelectedChemical","modalType","setModalType","showDeleteConfirmation","setShowDeleteConfirmation","chemicalToDelete","setChemicalToDelete","isError","useCountAllChemicalsQuery","limit","deleteChemicalFromSupplier","isDeleting","useDeleteChemicalFromSupplierMutation","useEffect","Math","ceil","Array","isArray","Table","TableHeader","TableRow","TableHead","TableBody","index","TableCell","cas_number","handleDeleteClick","Trash2","AlertDialog","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","AlertDialogDescription","AlertDialogFooter","AlertDialogCancel","AlertDialogAction","Number","SuppliersTable","suppliers","useGetSuppliersQuery","currentSupplier","setCurrentSupplier","filters","setFilters","email","mobile","country","website","navigate","useNavigate","selectedSupplier","setSelectedSupplier","showChemicalTable","setShowChemicalTable","deleteSupplier","useDeleteSupplierMutation","handleFilterChange","field","prev","filteredData","searchTerm","toLowerCase","includes","paginatedData","slice","message","type","React","Fragment","DropdownMenu","DropdownMenuTrigger","asChild","EllipsisVertical","DropdownMenuContent","align","DropdownMenuItem","handleAddChemical","id","handleDelete","handleChemicalsClick","Badge","totalChemicalIds","Link","to","rel","htmlFor","parseInt","max","min","PurchaseOrdersTable","purchaseOrders","order","createdDate","orderNumber","paymentStatus","totalTax","totalDiscount","totalAmount","breadcrumbItems","label","href","SuppliersDashboard","showPurchaseOrders","setShowPurchaseOrders","showChemicalsModal","setShowChemicalsModal","BreadcrumbWithCustomSeparator","items","Plus","prevFilters","onChemicalClick"],"mappings":"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"}