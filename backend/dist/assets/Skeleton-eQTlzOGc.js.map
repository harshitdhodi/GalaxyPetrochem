{"version":3,"file":"Skeleton-eQTlzOGc.js","sources":["../../node_modules/antd/es/skeleton/Element.js","../../node_modules/antd/es/skeleton/style/index.js","../../node_modules/antd/es/skeleton/Paragraph.js","../../node_modules/antd/es/skeleton/Title.js","../../node_modules/antd/es/skeleton/Skeleton.js","../../node_modules/antd/es/skeleton/Button.js","../../node_modules/antd/es/skeleton/Avatar.js","../../node_modules/antd/es/skeleton/Input.js","../../node_modules/antd/es/skeleton/Image.js","../../node_modules/antd/es/skeleton/Node.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nconst Element = props => {\n  const {\n    prefixCls,\n    className,\n    style,\n    size,\n    shape\n  } = props;\n  const sizeCls = classNames({\n    [`${prefixCls}-lg`]: size === 'large',\n    [`${prefixCls}-sm`]: size === 'small'\n  });\n  const shapeCls = classNames({\n    [`${prefixCls}-circle`]: shape === 'circle',\n    [`${prefixCls}-square`]: shape === 'square',\n    [`${prefixCls}-round`]: shape === 'round'\n  });\n  const sizeStyle = React.useMemo(() => typeof size === 'number' ? {\n    width: size,\n    height: size,\n    lineHeight: `${size}px`\n  } : {}, [size]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(prefixCls, sizeCls, shapeCls, className),\n    style: Object.assign(Object.assign({}, sizeStyle), style)\n  });\n};\nexport default Element;","import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: unit(size)\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = (size, calc) => Object.assign({\n  width: calc(size).mul(5).equal(),\n  minWidth: calc(size).mul(5).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [skeletonAvatarCls]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return {\n    [skeletonInputCls]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight, calc)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG, calc)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM, calc))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM,\n    calc\n  } = token;\n  return {\n    [skeletonImageCls]: Object.assign(Object.assign({\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'middle',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(calc(imageSizeBase).mul(2).equal())), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: calc(imageSizeBase).mul(4).equal(),\n        maxHeight: calc(imageSizeBase).mul(4).equal()\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = (size, calc) => Object.assign({\n  width: calc(size).mul(2).equal(),\n  minWidth: calc(size).mul(2).equal()\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    calc\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [skeletonButtonCls]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: calc(controlHeight).mul(2).equal(),\n      minWidth: calc(controlHeight).mul(2).equal()\n    }, genSkeletonElementButtonSize(controlHeight, calc))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM, calc))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [componentCls]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [skeletonAvatarCls]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [skeletonTitleCls]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [skeletonParagraphCls]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [skeletonTitleCls]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [skeletonButtonCls]: {\n        width: '100%'\n      },\n      [skeletonInputCls]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n};\nexport default genStyleHooks('Skeleton', token => {\n  const {\n    componentCls,\n    calc\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: calc(token.controlHeight).mul(1.5).equal(),\n    borderRadius: 100,\n    // Large number to make capsule shape\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, prepareComponentToken, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nconst getWidth = (index, props) => {\n  const {\n    width,\n    rows = 2\n  } = props;\n  if (Array.isArray(width)) {\n    return width[index];\n  }\n  // last paragraph\n  if (rows - 1 === index) {\n    return width;\n  }\n  return undefined;\n};\nconst Paragraph = props => {\n  const {\n    prefixCls,\n    className,\n    style,\n    rows = 0\n  } = props;\n  const rowList = Array.from({\n    length: rows\n  }).map((_, index) => (\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-array-index-key\n  React.createElement(\"li\", {\n    key: index,\n    style: {\n      width: getWidth(index, props)\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: classNames(prefixCls, className),\n    style: style\n  }, rowList);\n};\nexport default Paragraph;","\"use client\";\n\n/* eslint-disable jsx-a11y/heading-has-content */\nimport * as React from 'react';\nimport classNames from 'classnames';\nconst Title = _ref => {\n  let {\n    prefixCls,\n    className,\n    width,\n    style\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // biome-ignore lint/a11y/useHeadingContent: HOC here\n    React.createElement(\"h3\", {\n      className: classNames(prefixCls, className),\n      style: Object.assign({\n        width\n      }, style)\n    })\n  );\n};\nexport default Title;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useComponentConfig } from '../config-provider/context';\nimport SkeletonAvatar from './Avatar';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonImage from './Image';\nimport SkeletonInput from './Input';\nimport SkeletonNode from './Node';\nimport Paragraph from './Paragraph';\nimport useStyle from './style';\nimport Title from './Title';\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    loading,\n    className,\n    rootClassName,\n    style,\n    children,\n    avatar = false,\n    title = true,\n    paragraph = true,\n    active,\n    round\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    className: contextClassName,\n    style: contextStyle\n  } = useComponentConfig('skeleton');\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  if (loading || !('loading' in props)) {\n    const hasAvatar = !!avatar;\n    const hasTitle = !!title;\n    const hasParagraph = !!paragraph;\n    // Avatar\n    let avatarNode;\n    if (hasAvatar) {\n      const avatarProps = Object.assign(Object.assign({\n        prefixCls: `${prefixCls}-avatar`\n      }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n      // We direct use SkeletonElement as avatar in skeleton internal.\n      avatarNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-header`\n      }, /*#__PURE__*/React.createElement(Element, Object.assign({}, avatarProps)));\n    }\n    let contentNode;\n    if (hasTitle || hasParagraph) {\n      // Title\n      let $title;\n      if (hasTitle) {\n        const titleProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-title`\n        }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n        $title = /*#__PURE__*/React.createElement(Title, Object.assign({}, titleProps));\n      }\n      // Paragraph\n      let paragraphNode;\n      if (hasParagraph) {\n        const paragraphProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-paragraph`\n        }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n        paragraphNode = /*#__PURE__*/React.createElement(Paragraph, Object.assign({}, paragraphProps));\n      }\n      contentNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-content`\n      }, $title, paragraphNode);\n    }\n    const cls = classNames(prefixCls, {\n      [`${prefixCls}-with-avatar`]: hasAvatar,\n      [`${prefixCls}-active`]: active,\n      [`${prefixCls}-rtl`]: direction === 'rtl',\n      [`${prefixCls}-round`]: round\n    }, contextClassName, className, rootClassName, hashId, cssVarCls);\n    return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n      className: cls,\n      style: Object.assign(Object.assign({}, contextStyle), style)\n    }, avatarNode, contentNode));\n  }\n  return children !== null && children !== void 0 ? children : null;\n};\nSkeleton.Button = SkeletonButton;\nSkeleton.Avatar = SkeletonAvatar;\nSkeleton.Input = SkeletonInput;\nSkeleton.Image = SkeletonImage;\nSkeleton.Node = SkeletonNode;\nif (process.env.NODE_ENV !== 'production') {\n  Skeleton.displayName = 'Skeleton';\n}\nexport default Skeleton;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { ConfigContext } from '../config-provider';\nimport Element from './Element';\nimport useStyle from './style';\nconst SkeletonButton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    active,\n    block = false,\n    size = 'default'\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const otherProps = omit(props, ['prefixCls']);\n  const cls = classNames(prefixCls, `${prefixCls}-element`, {\n    [`${prefixCls}-active`]: active,\n    [`${prefixCls}-block`]: block\n  }, className, rootClassName, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  }, /*#__PURE__*/React.createElement(Element, Object.assign({\n    prefixCls: `${prefixCls}-button`,\n    size: size\n  }, otherProps))));\n};\nexport default SkeletonButton;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { ConfigContext } from '../config-provider';\nimport Element from './Element';\nimport useStyle from './style';\nconst SkeletonAvatar = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    active,\n    shape = 'circle',\n    size = 'default'\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const otherProps = omit(props, ['prefixCls', 'className']);\n  const cls = classNames(prefixCls, `${prefixCls}-element`, {\n    [`${prefixCls}-active`]: active\n  }, className, rootClassName, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  }, /*#__PURE__*/React.createElement(Element, Object.assign({\n    prefixCls: `${prefixCls}-avatar`,\n    shape: shape,\n    size: size\n  }, otherProps))));\n};\nexport default SkeletonAvatar;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { ConfigContext } from '../config-provider';\nimport Element from './Element';\nimport useStyle from './style';\nconst SkeletonInput = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    active,\n    block,\n    size = 'default'\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const otherProps = omit(props, ['prefixCls']);\n  const cls = classNames(prefixCls, `${prefixCls}-element`, {\n    [`${prefixCls}-active`]: active,\n    [`${prefixCls}-block`]: block\n  }, className, rootClassName, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  }, /*#__PURE__*/React.createElement(Element, Object.assign({\n    prefixCls: `${prefixCls}-input`,\n    size: size\n  }, otherProps))));\n};\nexport default SkeletonInput;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nconst path = 'M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z';\nconst SkeletonImage = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    style,\n    active\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const cls = classNames(prefixCls, `${prefixCls}-element`, {\n    [`${prefixCls}-active`]: active\n  }, className, rootClassName, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${prefixCls}-image`, className),\n    style: style\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 1098 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: `${prefixCls}-image-svg`\n  }, /*#__PURE__*/React.createElement(\"title\", null, \"Image placeholder\"), /*#__PURE__*/React.createElement(\"path\", {\n    d: path,\n    className: `${prefixCls}-image-path`\n  })))));\n};\nexport default SkeletonImage;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nconst SkeletonNode = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    style,\n    active,\n    children\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const cls = classNames(prefixCls, `${prefixCls}-element`, {\n    [`${prefixCls}-active`]: active\n  }, hashId, className, rootClassName, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(`${prefixCls}-image`, className),\n    style: style\n  }, children)));\n};\nexport default SkeletonNode;"],"names":["Element","props","prefixCls","className","style","size","shape","sizeCls","classNames","shapeCls","sizeStyle","React.useMemo","useMemo","width","height","lineHeight","React.createElement","Object","assign","skeletonClsLoading","Keyframes","backgroundPosition","genSkeletonElementCommonSize","unit","genSkeletonElementAvatarSize","genSkeletonColor","token","background","skeletonLoadingBackground","backgroundSize","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","genSkeletonElementInputSize","calc","mul","equal","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","gradientFromColor","controlHeight","controlHeightLG","controlHeightSM","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","titleHeight","blockRadius","paragraphLiHeight","controlHeightXS","paragraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","useStyle","genStyleHooks","skeletonToken","mergeToken","gradientToColor","colorFillContent","colorFill","color","colorGradientEnd","marginLG","marginXXS","deprecatedTokens","getWidth","index","rows","Array","isArray","Paragraph","rowList","from","length","map","_","key","Title","_ref","getComponentProps","prop","Skeleton","customizePrefixCls","loading","rootClassName","children","avatar","title","paragraph","active","round","getPrefixCls","direction","contextClassName","contextStyle","useComponentConfig","wrapCSSVar","hashId","cssVarCls","hasAvatar","hasTitle","hasParagraph","avatarNode","contentNode","avatarProps","getAvatarBasicProps","$title","paragraphNode","titleProps","getTitleBasicProps","paragraphProps","basicProps","getParagraphBasicProps","cls","createElement","Button","block","React.useContext","ConfigContext","otherProps","omit","Avatar","Input","Image","viewBox","xmlns","d","Node"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}