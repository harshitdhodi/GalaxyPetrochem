{"version":3,"file":"AddInquiry-B7GJhT2-.js","sources":["../../src/inquiry/AddInquiry.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue\r\n} from \"@/components/ui/select\";\r\nimport {\r\n    Form,\r\n    FormControl,\r\n    FormField,\r\n    FormItem,\r\n    FormLabel,\r\n    FormMessage\r\n} from \"@/components/ui/form\";\r\nimport { useAddInquiryMutation, } from \"@/slice/inquiry/inquiry\";\r\nimport { useGetAllSourcesQuery } from \"@/slice/source/source\";\r\nimport * as z from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useGetAllStatusesQuery } from '@/slice/status/status';\r\nimport { BreadcrumbWithCustomSeparator } from '@/breadCrumb/BreadCrumb';\r\nconst breadcrumbItems = [\r\n    { label: \"Dashboard\", href: \"/dashboard\" },\r\n    { label: \"Inquiry Table\", href: \"/inquiry-list\" },\r\n    { label: \"Inquiry Form\", href: null }, // No `href` indicates the current page\r\n]\r\n// Define validation schema\r\nconst inquirySchema = z.object({\r\n    firstName: z.string().min(2, { message: \"First name must be at least 2 characters\" }),\r\n    lastName: z.string().min(2, { message: \"Last name must be at least 2 characters\" }),\r\n    organisation: z.string().min(2, { message: \"Organisation name must be at least 2 characters\" }),\r\n    department: z.string().optional(),\r\n    email: z.string().email({ message: \"Invalid email address\" }),\r\n    phone: z.string()\r\n        .regex(/^[0-9]{10}$/, { message: \"Phone number must be 10 digits\" }),\r\n    address: z.string().optional(),\r\n    country: z.string().optional(),\r\n    message: z.string().min(10, { message: \"Message must be at least 10 characters\" }),\r\n    needCallback: z.boolean().default(false),\r\n    status: z.string().nonempty({ message: \"Please select a status\" }),\r\n    source: z.string().nonempty({ message: \"Please select a source\" })\r\n});\r\n\r\nexport default function AddInquiryForm({ onClose }) {\r\n    const [addInquiry, { isLoading: isAdding }] = useAddInquiryMutation();\r\n    const { data: statuses, isLoading: statusesLoading } = useGetAllStatusesQuery();\r\n    const { data: sources, isLoading: sourcesLoading } = useGetAllSourcesQuery();\r\n    const navigate = useNavigate();\r\n\r\n    // Initialize form with zod resolver\r\n    const form = useForm({\r\n        resolver: zodResolver(inquirySchema),\r\n        defaultValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            organisation: \"\",\r\n            department: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            address: \"\",\r\n            country: \"\",\r\n            message: \"\",\r\n            needCallback: false,\r\n            status: \"\", // Default value if statuses are not fetched yet\r\n            source: \"\" // Default empty value for source\r\n        }\r\n    });\r\n\r\n    // Handle form submission\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            const inquiryData = {\r\n                ...data,\r\n                date: new Date().toISOString().split('T')[0] // Current date\r\n            };\r\n\r\n            await addInquiry(inquiryData).unwrap();\r\n\r\n            // Reset form and navigate\r\n            form.reset();\r\n            navigate('/inquiry-list');\r\n        } catch (error) {\r\n            // Display error feedback\r\n            alert(error?.data?.message || \"Failed to add inquiry.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ml-1\">\r\n                <BreadcrumbWithCustomSeparator items={breadcrumbItems} />\r\n\r\n            </div>\r\n            <Form {...form}>\r\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 p-4\">\r\n                    <h2 className=\"text-xl font-semibold mb-4\">Add New Inquiry</h2>\r\n\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <FormField\r\n                            control={form.control}\r\n                            name=\"firstName\"\r\n                            render={({ field }) => (\r\n                                <FormItem>\r\n                                    <FormLabel>First Name</FormLabel>\r\n                                    <FormControl>\r\n                                        <Input placeholder=\"Enter first name\" {...field} />\r\n                                    </FormControl>\r\n                                    <FormMessage />\r\n                                </FormItem>\r\n                            )}\r\n                        />\r\n\r\n                        <FormField\r\n                            control={form.control}\r\n                            name=\"lastName\"\r\n                            render={({ field }) => (\r\n                                <FormItem>\r\n                                    <FormLabel>Last Name</FormLabel>\r\n                                    <FormControl>\r\n                                        <Input placeholder=\"Enter last name\" {...field} />\r\n                                    </FormControl>\r\n                                    <FormMessage />\r\n                                </FormItem>\r\n                            )}\r\n                        />\r\n                    </div>\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"organisation\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Organisation</FormLabel>\r\n                                <FormControl>\r\n                                    <Input placeholder=\"Enter organisation name\" {...field} />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"email\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Email</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter email\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"phone\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Phone Number</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        type=\"tel\"\r\n                                        placeholder=\"Enter 10-digit phone\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"address\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Address</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        placeholder=\"Enter address\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"country\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Country</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        placeholder=\"Enter country\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"message\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Message</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        placeholder=\"Enter message\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"needCallback\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Need Callback</FormLabel>\r\n                                <FormControl>\r\n                                    <Input\r\n                                        type=\"checkbox\"\r\n                                        {...field}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"status\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Status</FormLabel>\r\n                                {statusesLoading ? (\r\n                                    <div>Loading statuses...</div>\r\n                                ) : (\r\n                                    <Select\r\n                                        onValueChange={field.onChange}\r\n                                        value={field.value}\r\n                                    >\r\n                                        <FormControl>\r\n                                            <SelectTrigger>\r\n                                                <SelectValue placeholder=\"Select status\" />\r\n                                            </SelectTrigger>\r\n                                        </FormControl>\r\n                                        <SelectContent>\r\n                                            {statuses?.data?.map((status) => (\r\n                                                <SelectItem key={status._id} value={status.status}>\r\n                                                    {status.status}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                )}\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n                    <FormField\r\n                        control={form.control}\r\n                        name=\"source\"\r\n                        render={({ field }) => (\r\n                            <FormItem>\r\n                                <FormLabel>Source</FormLabel>\r\n                                {sourcesLoading ? (\r\n                                    <div>Loading sources...</div>\r\n                                ) : (\r\n                                    <Select\r\n                                        onValueChange={field.onChange}\r\n                                        value={field.value}\r\n                                    >\r\n                                        <FormControl>\r\n                                            <SelectTrigger>\r\n                                                <SelectValue placeholder=\"Select source\" />\r\n                                            </SelectTrigger>\r\n                                        </FormControl>\r\n                                        <SelectContent>\r\n                                            {sources?.data?.map((source) => (\r\n                                                <SelectItem key={source._id} value={source.source}>\r\n                                                    {source.source}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                )}\r\n                                <FormMessage />\r\n                            </FormItem>\r\n                        )}\r\n                    />\r\n\r\n\r\n                    <div className=\"flex justify-end space-x-2 pt-4\">\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={isAdding}\r\n                        >\r\n                            {isAdding ? \"Adding...\" : \"Add Inquiry\"}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n"],"names":["breadcrumbItems","label","href","inquirySchema","z.object","firstName","z.string","min","message","lastName","organisation","department","optional","email","phone","regex","address","country","needCallback","z.boolean","default","status","nonempty","source","AddInquiryForm","onClose","addInquiry","isLoading","isAdding","useAddInquiryMutation","data","statuses","statusesLoading","useGetAllStatusesQuery","sources","sourcesLoading","useGetAllSourcesQuery","navigate","useNavigate","form","useForm","resolver","zodResolver","defaultValues","jsxs","Fragment","children","jsx","className","BreadcrumbWithCustomSeparator","items","Form","onSubmit","handleSubmit","async","inquiryData","date","Date","toISOString","split","unwrap","reset","error","alert","FormField","control","name","render","field","FormItem","FormLabel","FormControl","Input","placeholder","FormMessage","type","Select","onValueChange","onChange","value","SelectTrigger","SelectValue","SelectContent","map","SelectItem","_id","Button","disabled"],"mappings":"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"}