{"version":3,"file":"ChemicalMapping-Cs-Vvgw6.js","sources":["../../src/customer/components/ChemicalTable.jsx","../../src/customer/components/ChemicalSearch.jsx","../../src/customer/components/CustomerSearch.jsx","../../src/customer/ChemicalMapping.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Table, Button, Select, Space } from 'antd';\r\n\r\nexport function ChemicalTable({ chemicals, onRemoveChemical }) {\r\n  const [page, setPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n\r\n  // Calculate pagination\r\n  const totalPages = Math.ceil((chemicals?.length || 0) / itemsPerPage);\r\n  const startIndex = (page - 1) * itemsPerPage;\r\n  const endIndex = startIndex + itemsPerPage;\r\n  const currentChemicals = chemicals?.slice(startIndex, endIndex);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'action',\r\n      render: (_, record) => (\r\n        <Button type=\"primary\" danger size=\"small\" onClick={() => onRemoveChemical(record)}>\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Chemical Name',\r\n      dataIndex: 'name',\r\n    },\r\n    {\r\n      title: 'CAS Number',\r\n      dataIndex: 'cas_number',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"border rounded-md mt-4 p-4\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={currentChemicals}\r\n        rowKey=\"_id\"\r\n        pagination={false}\r\n      />\r\n\r\n      {/* Pagination Controls */}\r\n      <div className=\"flex items-center justify-between mt-4\">\r\n        <div className=\"text-sm text-gray-500\">\r\n          Items per page:{' '}\r\n          <Select\r\n            value={itemsPerPage}\r\n            onChange={(value) => {\r\n              setItemsPerPage(value);\r\n              setPage(1); // Reset to first page when changing items per page\r\n            }}\r\n            options={[\r\n              { value: 10, label: '10' },\r\n              { value: 20, label: '20' },\r\n              { value: 50, label: '50' },\r\n            ]}\r\n            style={{ width: 80 }}\r\n          />\r\n        </div>\r\n\r\n        <Space>\r\n          <Button\r\n            type=\"default\"\r\n            size=\"small\"\r\n            onClick={() => setPage(page - 1)}\r\n            disabled={page === 1}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <span className=\"text-sm text-gray-500\">\r\n            {startIndex + 1} - {Math.min(endIndex, chemicals?.length || 0)} of{' '}\r\n            {chemicals?.length || 0}\r\n          </span>\r\n          <Button\r\n            type=\"default\"\r\n            size=\"small\"\r\n            onClick={() => setPage(page + 1)}\r\n            disabled={page === totalPages}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { useGetChemicalsByAlphabetQuery } from '@/slice/supplierSlice/chemicalBySupplier';\r\nimport { useAddChemicalToCustomerMutation } from '@/slice/customerSlice/customerApiSlice';\r\nimport { Button } from '@/components/ui/button';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function ChemicalSearch({ selectedCustomer, refetchCustomer }) {\r\n  const [chemicalSearch, setChemicalSearch] = useState('');\r\n  const [queryString, setQueryString] = useState('');\r\n  const [selectedChemical, setSelectedChemical] = useState(null);\r\n\r\n  const { data: chemicals, isLoading: isLoadingChemicals } = useGetChemicalsByAlphabetQuery(\r\n    queryString.charAt(0),\r\n    { skip: queryString.length === 0 }\r\n  );\r\n\r\n  const [addChemicalToCustomer, { isLoading: isAdding }] = useAddChemicalToCustomerMutation();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setChemicalSearch(value);\r\n    setQueryString(value);\r\n  };\r\n\r\n  const handleSelectChemical = (chemical) => {\r\n    setSelectedChemical(chemical);\r\n    setChemicalSearch(chemical.name);\r\n    setQueryString('');\r\n  };\r\n\r\n  const handleAddChemical = async () => {\r\n    if (!selectedChemical || !selectedCustomer) {\r\n      toast.error('Please select both customer and chemical');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const chemicalId = selectedChemical.id || selectedChemical._id;\r\n      const customerId = selectedCustomer._id;\r\n\r\n      await addChemicalToCustomer({\r\n        customerId,\r\n        chemicalId,\r\n      }).unwrap();\r\n\r\n      // Reset form and refetch data\r\n      setChemicalSearch('');\r\n      setSelectedChemical(null);\r\n      await refetchCustomer();\r\n      \r\n      toast.success('Chemical added successfully');\r\n    } catch (error) {\r\n      toast.error(error.message || 'Failed to add chemical');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <div className=\"relative\">\r\n        <Input\r\n          placeholder=\"Search Chemical\"\r\n          value={chemicalSearch}\r\n          onChange={handleInputChange}\r\n          className=\"w-full mb-4\"\r\n          disabled={!selectedCustomer}\r\n        />\r\n        {isLoadingChemicals && (\r\n          <div className=\"absolute top-2 right-4 text-sm text-gray-500\">\r\n            Loading...\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {queryString && chemicals?.length > 0 && (\r\n        <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n          {chemicals.map((chemical) => (\r\n            <li\r\n              key={chemical._id}\r\n              onClick={() => handleSelectChemical(chemical)}\r\n              className=\"p-2 hover:bg-gray-200 cursor-pointer\"\r\n            >\r\n              {chemical.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      <Button\r\n        onClick={handleAddChemical}\r\n        disabled={isAdding || !selectedChemical || !selectedCustomer}\r\n        className=\"mt-4 w-[10%] py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n      >\r\n        {isAdding ? 'Adding...' : 'Add '}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Input } from '@/components/ui/input'\r\nimport { useGetCustomersByAlphabetQuery, useGetCustomerByIdQuery } from '@/slice/customerSlice/customerApiSlice'\r\nimport { useRemoveChemicalFromCustomerMutation } from '@/slice/customerSlice/customerApiSlice'\r\nimport { ChemicalTable } from './ChemicalTable'\r\nimport { ChemicalSearch } from './ChemicalSearch'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport function CustomerSearch({ onSelectCustomer }) {\r\n  const [customerSearch, setCustomerSearch] = useState('')\r\n  const [queryString, setQueryString] = useState('')\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n\r\n  // Fetch customers based on the first letter of the query string\r\n  const { data: customers, isLoading: isLoadingCustomers, refetch: refetchCustomers } = useGetCustomersByAlphabetQuery(\r\n    queryString.charAt(0),\r\n    {\r\n      skip: queryString.length === 0,\r\n    }\r\n  );\r\n\r\n  // Fetch selected customer details to keep them updated\r\n  const { data: customerDetails, refetch: refetchCustomer } = useGetCustomerByIdQuery(\r\n    selectedCustomer?._id,\r\n    {\r\n      skip: !selectedCustomer?._id,\r\n    }\r\n  );\r\n\r\n  const [removeChemicalFromCustomer] = useRemoveChemicalFromCustomerMutation()\r\n\r\n  const handleSelectCustomer = (customer) => {\r\n    setSelectedCustomer(customer)\r\n    setCustomerSearch(customer.name)\r\n    setQueryString('')\r\n    onSelectCustomer(customer)\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value\r\n    setCustomerSearch(value)\r\n    setQueryString(value)\r\n  }\r\n\r\n  const handleRemoveChemical = async (removedChemical) => {\r\n    try {\r\n      await removeChemicalFromCustomer({\r\n        customerId: selectedCustomer._id,\r\n        chemicalId: removedChemical._id\r\n      }).unwrap();\r\n\r\n      // Refetch both customer details and customer list\r\n      await Promise.all([\r\n        refetchCustomer(),\r\n        refetchCustomers()\r\n      ]);\r\n      \r\n      toast.success('Chemical removed successfully');\r\n    } catch (error) {\r\n      console.error('Error removing chemical:', error);\r\n      toast.error('Failed to remove chemical');\r\n    }\r\n  };\r\n\r\n  // Use customerDetails data if available, otherwise use selectedCustomer\r\n  const currentCustomerData = customerDetails?.data || selectedCustomer;\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <Input\r\n        placeholder=\"Search Customer\"\r\n        value={customerSearch}\r\n        onChange={handleInputChange}\r\n        className=\"w-full mb-4\"\r\n      />\r\n\r\n      {/* Dropdown for Customer Suggestions */}\r\n      {isLoadingCustomers ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        queryString &&\r\n        customers &&\r\n        customers.length > 0 && (\r\n          <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n            {customers.map((customer) => (\r\n              <li\r\n                key={customer._id}\r\n                onClick={() => handleSelectCustomer(customer)}\r\n                className=\"p-2 hover:bg-gray-200 cursor-pointer\"\r\n              >\r\n                {customer.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )\r\n      )}\r\n\r\n      {/* ChemicalSearch Component */}\r\n      <ChemicalSearch \r\n        selectedCustomer={currentCustomerData} \r\n        refetchCustomer={async () => {\r\n          await Promise.all([\r\n            refetchCustomer(),\r\n            refetchCustomers()\r\n          ]);\r\n        }}\r\n      />\r\n\r\n      {/* ChemicalTable Component */}\r\n      {currentCustomerData && (\r\n        <ChemicalTable \r\n          chemicals={currentCustomerData.chemicalId || []} \r\n          onRemoveChemical={handleRemoveChemical}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","'use client'\r\n\r\nimport React from 'react'\r\nimport { CustomerSearch } from './components/CustomerSearch'\r\n// import { ChemicalSearch } from './components/ChemicalSearch'\r\nimport { ChemicalTable } from './components/ChemicalTable'\r\nimport { Button } from '@/components/ui/button'\r\nimport { BreadcrumbWithCustomSeparator } from '@/breadCrumb/BreadCrumb'\r\n\r\nconst breadcrumbItems = [\r\n  { label: \"Dashboard\", href: \"/dashboard\" },\r\n  { label: \"Chemical Mapping\", href: null },\r\n]\r\nexport default function AssignChemicals() {\r\n  const [selectedCustomer, setSelectedCustomer] = React.useState(null)\r\n  const [chemicals, setChemicals] = React.useState([])\r\n\r\n  const handleSelectCustomer = (customer) => {\r\n    setSelectedCustomer(customer)\r\n    setChemicals([])\r\n  }\r\n  return (\r\n    <>\r\n    <div className=\"ml-1\">\r\n              <BreadcrumbWithCustomSeparator items={breadcrumbItems} />\r\n        \r\n            </div>\r\n    <div className=\"py-4 space-y-6\">\r\n\r\n      <h1 className=\"text-2xl font-bold text-purple-700\">\r\n        Assign Chemicals to Customer\r\n      </h1>\r\n\r\n      <div className=\"space-y-4\">\r\n        <CustomerSearch onSelectCustomer={handleSelectCustomer} />\r\n\r\n        \r\n        \r\n \r\n       \r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["ChemicalTable","chemicals","onRemoveChemical","page","setPage","useState","itemsPerPage","setItemsPerPage","totalPages","Math","ceil","length","startIndex","endIndex","currentChemicals","slice","columns","title","dataIndex","render","_","record","jsx","Button","type","danger","size","onClick","children","jsxs","className","Table","dataSource","rowKey","pagination","Select","value","onChange","options","label","style","width","Space","disabled","min","ChemicalSearch","selectedCustomer","refetchCustomer","chemicalSearch","setChemicalSearch","queryString","setQueryString","selectedChemical","setSelectedChemical","data","isLoading","isLoadingChemicals","useGetChemicalsByAlphabetQuery","charAt","skip","addChemicalToCustomer","isAdding","useAddChemicalToCustomerMutation","Input","placeholder","e","target","map","chemical","name","handleSelectChemical","_id","async","chemicalId","id","customerId","unwrap","toast","success","error","message","CustomerSearch","onSelectCustomer","customerSearch","setCustomerSearch","setSelectedCustomer","customers","isLoadingCustomers","refetch","refetchCustomers","useGetCustomersByAlphabetQuery","customerDetails","useGetCustomerByIdQuery","removeChemicalFromCustomer","useRemoveChemicalFromCustomerMutation","currentCustomerData","customer","handleSelectCustomer","Promise","all","removedChemical","breadcrumbItems","href","AssignChemicals","React","setChemicals","Fragment","BreadcrumbWithCustomSeparator","items"],"mappings":"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"}