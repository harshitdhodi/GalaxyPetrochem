{"version":3,"file":"SearchSuppliers-C99_AZ-o.js","sources":["../../src/chemical/searchSupplier/SupplierTable.jsx","../../src/chemical/searchSupplier/SearchChemical.jsx","../../src/chemical/SearchSuppliers.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { useGetSuppliersByChemicalIdQuery } from '@/slice/supplierSlice/SupplierSlice';\r\n\r\nexport function SupplierTable({ selectedChemicalIds, onRemoveChemical }) {\r\n  const [page, setPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [filters, setFilters] = useState({ name: '', email: '', mobile: '' });\r\n\r\n  const { data: suppliers, error, isLoading } = useGetSuppliersByChemicalIdQuery(selectedChemicalIds);\r\n\r\n  const handleFilterChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFilters({ ...filters, [name]: value });\r\n  };\r\n\r\n  const filteredSuppliers = suppliers\r\n    ? suppliers.filter((supplier) =>\r\n        Object.entries(filters).every(\r\n          ([key, value]) =>\r\n            supplier[key]?.toString().toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    : [];\r\n\r\n  const totalPages = Math.ceil(filteredSuppliers.length / itemsPerPage);\r\n  const startIndex = (page - 1) * itemsPerPage;\r\n  const endIndex = startIndex + itemsPerPage;\r\n  const currentSuppliers = filteredSuppliers.slice(startIndex, endIndex);\r\n\r\n  return (\r\n    <div className=\"border rounded-md mt-4\">\r\n      <Table>\r\n        {/* Table Headers */}\r\n        <TableHeader  className=\"bg-gray-200\">\r\n          <TableRow>\r\n            <TableHead>Name</TableHead>\r\n            <TableHead>Email</TableHead>\r\n            <TableHead>Mobile</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n\r\n        {/* Filter Row */}\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Filter by Name\"\r\n                value={filters.name}\r\n                onChange={handleFilterChange}\r\n                className=\"border rounded w-full px-2 py-1\"\r\n              />\r\n            </TableCell>\r\n            <TableCell>\r\n              <input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                placeholder=\"Filter by Email\"\r\n                value={filters.email}\r\n                onChange={handleFilterChange}\r\n                className=\"border rounded w-full px-2 py-1\"\r\n              />\r\n            </TableCell>\r\n            <TableCell>\r\n              <input\r\n                type=\"text\"\r\n                name=\"mobile\"\r\n                placeholder=\"Filter by Mobile\"\r\n                value={filters.mobile}\r\n                onChange={handleFilterChange}\r\n                className=\"border rounded w-full px-2 py-1\"\r\n              />\r\n            </TableCell>\r\n          </TableRow>\r\n\r\n          {/* Loading, Error, and No Data States */}\r\n          {isLoading && (\r\n            <TableRow>\r\n              <TableCell colSpan={3}>Loading suppliers...</TableCell>\r\n            </TableRow>\r\n          )}\r\n          {error && (\r\n            <TableRow>\r\n              <TableCell colSpan={3} className=\"text-red-500\">\r\n                 {error.message}\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n          {!isLoading && !error && currentSuppliers.length === 0 && (\r\n            <TableRow>\r\n              <TableCell colSpan={3}>No suppliers available.</TableCell>\r\n            </TableRow>\r\n          )}\r\n\r\n          {/* Display Filtered Suppliers */}\r\n          {currentSuppliers.map((supplier) => (\r\n            <TableRow key={supplier._id}>\r\n              <TableCell>{supplier.name}</TableCell>\r\n              <TableCell>{supplier.email}</TableCell>\r\n              <TableCell>{supplier.mobile}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* Pagination Controls */}\r\n      <div className=\"flex items-center justify-between px-4 py-2 border-t\">\r\n        <div className=\"text-sm text-gray-500\">\r\n          Items per page:\r\n          <select\r\n            className=\"border rounded\"\r\n            value={itemsPerPage}\r\n            onChange={(e) => setItemsPerPage(Number(e.target.value))}\r\n          >\r\n            <option value={10}>10</option>\r\n            <option value={20}>20</option>\r\n            <option value={50}>50</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button className=\"\" variant=\"secondary\" size=\"sm\" onClick={() => setPage(page - 1)} disabled={page === 1}>\r\n            Previous\r\n          </Button>\r\n          <span className=\"text-sm text-gray-500\">\r\n            {startIndex + 1} - {Math.min(endIndex, filteredSuppliers.length)} of {filteredSuppliers.length}\r\n          </span>\r\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setPage(page + 1)} disabled={page === totalPages}>\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Input } from '@/components/ui/input'\r\nimport { SupplierTable } from './SupplierTable'\r\nimport { useGetChemicalsByAlphabetQuery } from '@/slice/supplierSlice/chemicalBySupplier'\r\n\r\nexport function SearchChemical({ onSelectChemicals }) {\r\n  const [chemicalSearch, setChemicalSearch] = useState('')\r\n  const [queryString, setQueryString] = useState('')\r\n  const [selectedChemical, setSelectedChemical] = useState(null)\r\n  const [selectedChemicalIds, setSelectedChemicalIds] = useState([])\r\n  const [chemicals, setChemicals] = useState([])\r\n\r\n  // Fetch chemicals based on the first letter of the query string\r\n  const { \r\n    data: chemicalsData, \r\n    isLoading: isLoadingChemicals, \r\n    error: chemicalsError \r\n  } = useGetChemicalsByAlphabetQuery(\r\n    queryString.charAt(0) || '' \r\n  )\r\n\r\n  // Normalize the data to ensure it's an array\r\n  const normalizedChemicals = Array.isArray(chemicalsData) \r\n    ? chemicalsData \r\n    : (chemicalsData ? [chemicalsData] : [])\r\n\r\n  // Filter chemicals based on the full query string\r\n  const filteredChemicals = normalizedChemicals.filter(chemical => \r\n    chemical.name.toLowerCase().includes(queryString.toLowerCase()) ||\r\n    (chemical.cas_number && chemical.cas_number.toLowerCase().includes(queryString.toLowerCase()))\r\n  )\r\n\r\n  const handleSelectChemical = (chemical) => {\r\n    if (chemical) {\r\n      // Prevent duplicate selections\r\n      if (!selectedChemicalIds.includes(chemical._id)) {\r\n        const updatedChemicals = [...chemicals, chemical]\r\n        const updatedChemicalIds = [...selectedChemicalIds, chemical._id]\r\n        \r\n        setSelectedChemical(chemical)\r\n        setChemicals(updatedChemicals)\r\n        setSelectedChemicalIds(updatedChemicalIds)\r\n        setChemicalSearch('')\r\n        setQueryString('')\r\n        \r\n        // Optional: Notify parent component about selected chemicals\r\n        onSelectChemicals?.(updatedChemicals)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value\r\n    setChemicalSearch(value)\r\n    setQueryString(value)\r\n  }\r\n\r\n  const handleRemoveChemical = (removedChemical) => {\r\n    const updatedChemicals = chemicals.filter(\r\n      (chemical) => chemical._id !== removedChemical._id\r\n    )\r\n    const updatedChemicalIds = selectedChemicalIds.filter(\r\n      (id) => id !== removedChemical._id\r\n    )\r\n\r\n    setChemicals(updatedChemicals)\r\n    setSelectedChemicalIds(updatedChemicalIds)\r\n    \r\n    // Optional: Notify parent component about updated chemicals\r\n    onSelectChemicals?.(updatedChemicals)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <Input\r\n        placeholder=\"Search Chemical by Name or CAS Number\"\r\n        value={chemicalSearch}\r\n        onChange={handleInputChange}\r\n        className=\"w-full mb-4\"\r\n      />\r\n\r\n      {isLoadingChemicals ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        queryString &&\r\n        filteredChemicals &&\r\n        filteredChemicals.length > 0 && (\r\n          <ul className=\"border bg-white rounded max-h-40 overflow-y-auto\">\r\n            {filteredChemicals.map((chemical) => (\r\n              <li\r\n                key={chemical._id}\r\n                onClick={() => handleSelectChemical(chemical)}\r\n                className=\"p-2 hover:bg-gray-200 cursor-pointer\"\r\n              >\r\n                {chemical.name} (CAS: {chemical.cas_number || 'N/A'})\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )\r\n      )}\r\n\r\n      {chemicalsError && (\r\n        <div className=\"p-2 text-red-500\">Error loading chemicals: {chemicalsError.toString()}</div>\r\n      )}\r\n\r\n      {filteredChemicals?.length === 0 && !isLoadingChemicals && queryString && (\r\n        <div className=\"p-2 text-gray-500\">No Chemical found</div>\r\n      )}\r\n\r\n      <div className=\"mt-4\">\r\n        <SupplierTable\r\n          chemicals={chemicals}\r\n          selectedChemicalIds={selectedChemicalIds}\r\n          onRemoveChemical={handleRemoveChemical}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","'use client'\r\n\r\nimport React from 'react'\r\nimport { SearchChemical } from './searchSupplier/SearchChemical'\r\n\r\nexport default function AssignChemicals() {\r\n  const [selectedCustomer, setSelectedCustomer] = React.useState(null)\r\n  const [chemicals, setChemicals] = React.useState([])\r\n\r\n  const handleSelectCustomer = (customer) => {\r\n    setSelectedCustomer(customer)\r\n    setChemicals([])\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <h1 className=\"text-2xl font-bold text-purple-700\">\r\n       Search Supplier By Chemical Name \r\n      </h1>\r\n\r\n      <div className=\"space-y-4\">\r\n        <SearchChemical onSelectCustomer={handleSelectCustomer} />       \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["SupplierTable","selectedChemicalIds","onRemoveChemical","page","setPage","useState","itemsPerPage","setItemsPerPage","filters","setFilters","name","email","mobile","data","suppliers","error","isLoading","useGetSuppliersByChemicalIdQuery","handleFilterChange","e","value","target","filteredSuppliers","filter","supplier","Object","entries","every","key","toString","toLowerCase","includes","totalPages","Math","ceil","length","startIndex","endIndex","currentSuppliers","slice","jsxs","className","children","Table","jsx","TableHeader","TableRow","TableHead","TableBody","TableCell","type","placeholder","onChange","colSpan","message","map","_id","Number","Button","variant","size","onClick","disabled","min","SearchChemical","onSelectChemicals","chemicalSearch","setChemicalSearch","queryString","setQueryString","selectedChemical","setSelectedChemical","setSelectedChemicalIds","chemicals","setChemicals","chemicalsData","isLoadingChemicals","chemicalsError","useGetChemicalsByAlphabetQuery","charAt","filteredChemicals","Array","isArray","chemical","cas_number","Input","updatedChemicals","updatedChemicalIds","handleSelectChemical","removedChemical","id","AssignChemicals","selectedCustomer","setSelectedCustomer","React","onSelectCustomer","customer"],"mappings":"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"}